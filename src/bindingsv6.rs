/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const NRF_ERROR_BASE_NUM: u32 = 0;
pub const NRF_ERROR_SDM_BASE_NUM: u32 = 4096;
pub const NRF_ERROR_SOC_BASE_NUM: u32 = 8192;
pub const NRF_ERROR_STK_BASE_NUM: u32 = 12288;
pub const NRF_SUCCESS: u32 = 0;
pub const NRF_ERROR_SVC_HANDLER_MISSING: u32 = 1;
pub const NRF_ERROR_SOFTDEVICE_NOT_ENABLED: u32 = 2;
pub const NRF_ERROR_INTERNAL: u32 = 3;
pub const NRF_ERROR_NO_MEM: u32 = 4;
pub const NRF_ERROR_NOT_FOUND: u32 = 5;
pub const NRF_ERROR_NOT_SUPPORTED: u32 = 6;
pub const NRF_ERROR_INVALID_PARAM: u32 = 7;
pub const NRF_ERROR_INVALID_STATE: u32 = 8;
pub const NRF_ERROR_INVALID_LENGTH: u32 = 9;
pub const NRF_ERROR_INVALID_FLAGS: u32 = 10;
pub const NRF_ERROR_INVALID_DATA: u32 = 11;
pub const NRF_ERROR_DATA_SIZE: u32 = 12;
pub const NRF_ERROR_TIMEOUT: u32 = 13;
pub const NRF_ERROR_NULL: u32 = 14;
pub const NRF_ERROR_FORBIDDEN: u32 = 15;
pub const NRF_ERROR_INVALID_ADDR: u32 = 16;
pub const NRF_ERROR_BUSY: u32 = 17;
pub const NRF_ERROR_CONN_COUNT: u32 = 18;
pub const NRF_ERROR_RESOURCES: u32 = 19;
pub const BLE_ERROR_NOT_ENABLED: u32 = 12289;
pub const BLE_ERROR_INVALID_CONN_HANDLE: u32 = 12290;
pub const BLE_ERROR_INVALID_ATTR_HANDLE: u32 = 12291;
pub const BLE_ERROR_INVALID_ADV_HANDLE: u32 = 12292;
pub const BLE_ERROR_INVALID_ROLE: u32 = 12293;
pub const BLE_ERROR_BLOCKED_BY_OTHER_LINKS: u32 = 12294;
pub const NRF_L2CAP_ERR_BASE: u32 = 12544;
pub const NRF_GAP_ERR_BASE: u32 = 12800;
pub const NRF_GATTC_ERR_BASE: u32 = 13056;
pub const NRF_GATTS_ERR_BASE: u32 = 13312;
pub const BLE_HCI_STATUS_CODE_SUCCESS: u32 = 0;
pub const BLE_HCI_STATUS_CODE_UNKNOWN_BTLE_COMMAND: u32 = 1;
pub const BLE_HCI_STATUS_CODE_UNKNOWN_CONNECTION_IDENTIFIER: u32 = 2;
pub const BLE_HCI_AUTHENTICATION_FAILURE: u32 = 5;
pub const BLE_HCI_STATUS_CODE_PIN_OR_KEY_MISSING: u32 = 6;
pub const BLE_HCI_MEMORY_CAPACITY_EXCEEDED: u32 = 7;
pub const BLE_HCI_CONNECTION_TIMEOUT: u32 = 8;
pub const BLE_HCI_STATUS_CODE_COMMAND_DISALLOWED: u32 = 12;
pub const BLE_HCI_STATUS_CODE_INVALID_BTLE_COMMAND_PARAMETERS: u32 = 18;
pub const BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION: u32 = 19;
pub const BLE_HCI_REMOTE_DEV_TERMINATION_DUE_TO_LOW_RESOURCES: u32 = 20;
pub const BLE_HCI_REMOTE_DEV_TERMINATION_DUE_TO_POWER_OFF: u32 = 21;
pub const BLE_HCI_LOCAL_HOST_TERMINATED_CONNECTION: u32 = 22;
pub const BLE_HCI_UNSUPPORTED_REMOTE_FEATURE: u32 = 26;
pub const BLE_HCI_STATUS_CODE_INVALID_LMP_PARAMETERS: u32 = 30;
pub const BLE_HCI_STATUS_CODE_UNSPECIFIED_ERROR: u32 = 31;
pub const BLE_HCI_STATUS_CODE_LMP_RESPONSE_TIMEOUT: u32 = 34;
pub const BLE_HCI_STATUS_CODE_LMP_ERROR_TRANSACTION_COLLISION: u32 = 35;
pub const BLE_HCI_STATUS_CODE_LMP_PDU_NOT_ALLOWED: u32 = 36;
pub const BLE_HCI_INSTANT_PASSED: u32 = 40;
pub const BLE_HCI_PAIRING_WITH_UNIT_KEY_UNSUPPORTED: u32 = 41;
pub const BLE_HCI_DIFFERENT_TRANSACTION_COLLISION: u32 = 42;
pub const BLE_HCI_PARAMETER_OUT_OF_MANDATORY_RANGE: u32 = 48;
pub const BLE_HCI_CONTROLLER_BUSY: u32 = 58;
pub const BLE_HCI_CONN_INTERVAL_UNACCEPTABLE: u32 = 59;
pub const BLE_HCI_DIRECTED_ADVERTISER_TIMEOUT: u32 = 60;
pub const BLE_HCI_CONN_TERMINATED_DUE_TO_MIC_FAILURE: u32 = 61;
pub const BLE_HCI_CONN_FAILED_TO_BE_ESTABLISHED: u32 = 62;
pub const BLE_SVC_BASE: u32 = 96;
pub const BLE_SVC_LAST: u32 = 107;
pub const BLE_GAP_SVC_BASE: u32 = 108;
pub const BLE_GAP_SVC_LAST: u32 = 154;
pub const BLE_GATTC_SVC_BASE: u32 = 155;
pub const BLE_GATTC_SVC_LAST: u32 = 167;
pub const BLE_GATTS_SVC_BASE: u32 = 168;
pub const BLE_GATTS_SVC_LAST: u32 = 183;
pub const BLE_L2CAP_SVC_BASE: u32 = 184;
pub const BLE_L2CAP_SVC_LAST: u32 = 191;
pub const BLE_EVT_INVALID: u32 = 0;
pub const BLE_EVT_BASE: u32 = 1;
pub const BLE_EVT_LAST: u32 = 15;
pub const BLE_GAP_EVT_BASE: u32 = 16;
pub const BLE_GAP_EVT_LAST: u32 = 47;
pub const BLE_GATTC_EVT_BASE: u32 = 48;
pub const BLE_GATTC_EVT_LAST: u32 = 79;
pub const BLE_GATTS_EVT_BASE: u32 = 80;
pub const BLE_GATTS_EVT_LAST: u32 = 111;
pub const BLE_L2CAP_EVT_BASE: u32 = 112;
pub const BLE_L2CAP_EVT_LAST: u32 = 143;
pub const BLE_OPT_INVALID: u32 = 0;
pub const BLE_OPT_BASE: u32 = 1;
pub const BLE_OPT_LAST: u32 = 31;
pub const BLE_GAP_OPT_BASE: u32 = 32;
pub const BLE_GAP_OPT_LAST: u32 = 63;
pub const BLE_GATT_OPT_BASE: u32 = 64;
pub const BLE_GATT_OPT_LAST: u32 = 95;
pub const BLE_GATTC_OPT_BASE: u32 = 96;
pub const BLE_GATTC_OPT_LAST: u32 = 127;
pub const BLE_GATTS_OPT_BASE: u32 = 128;
pub const BLE_GATTS_OPT_LAST: u32 = 159;
pub const BLE_L2CAP_OPT_BASE: u32 = 160;
pub const BLE_L2CAP_OPT_LAST: u32 = 191;
pub const BLE_CFG_INVALID: u32 = 0;
pub const BLE_CFG_BASE: u32 = 1;
pub const BLE_CFG_LAST: u32 = 31;
pub const BLE_CONN_CFG_BASE: u32 = 32;
pub const BLE_CONN_CFG_LAST: u32 = 63;
pub const BLE_GAP_CFG_BASE: u32 = 64;
pub const BLE_GAP_CFG_LAST: u32 = 95;
pub const BLE_GATT_CFG_BASE: u32 = 96;
pub const BLE_GATT_CFG_LAST: u32 = 127;
pub const BLE_GATTC_CFG_BASE: u32 = 128;
pub const BLE_GATTC_CFG_LAST: u32 = 159;
pub const BLE_GATTS_CFG_BASE: u32 = 160;
pub const BLE_GATTS_CFG_LAST: u32 = 191;
pub const BLE_L2CAP_CFG_BASE: u32 = 192;
pub const BLE_L2CAP_CFG_LAST: u32 = 223;
pub const BLE_CONN_HANDLE_INVALID: u32 = 65535;
pub const BLE_CONN_HANDLE_ALL: u32 = 65534;
pub const BLE_UUID_UNKNOWN: u32 = 0;
pub const BLE_UUID_SERVICE_PRIMARY: u32 = 10240;
pub const BLE_UUID_SERVICE_SECONDARY: u32 = 10241;
pub const BLE_UUID_SERVICE_INCLUDE: u32 = 10242;
pub const BLE_UUID_CHARACTERISTIC: u32 = 10243;
pub const BLE_UUID_DESCRIPTOR_CHAR_EXT_PROP: u32 = 10496;
pub const BLE_UUID_DESCRIPTOR_CHAR_USER_DESC: u32 = 10497;
pub const BLE_UUID_DESCRIPTOR_CLIENT_CHAR_CONFIG: u32 = 10498;
pub const BLE_UUID_DESCRIPTOR_SERVER_CHAR_CONFIG: u32 = 10499;
pub const BLE_UUID_DESCRIPTOR_CHAR_PRESENTATION_FORMAT: u32 = 10500;
pub const BLE_UUID_DESCRIPTOR_CHAR_AGGREGATE_FORMAT: u32 = 10501;
pub const BLE_UUID_GATT: u32 = 6145;
pub const BLE_UUID_GATT_CHARACTERISTIC_SERVICE_CHANGED: u32 = 10757;
pub const BLE_UUID_GAP: u32 = 6144;
pub const BLE_UUID_GAP_CHARACTERISTIC_DEVICE_NAME: u32 = 10752;
pub const BLE_UUID_GAP_CHARACTERISTIC_APPEARANCE: u32 = 10753;
pub const BLE_UUID_GAP_CHARACTERISTIC_RECONN_ADDR: u32 = 10755;
pub const BLE_UUID_GAP_CHARACTERISTIC_PPCP: u32 = 10756;
pub const BLE_UUID_GAP_CHARACTERISTIC_CAR: u32 = 10918;
pub const BLE_UUID_GAP_CHARACTERISTIC_RPA_ONLY: u32 = 10953;
pub const BLE_UUID_TYPE_UNKNOWN: u32 = 0;
pub const BLE_UUID_TYPE_BLE: u32 = 1;
pub const BLE_UUID_TYPE_VENDOR_BEGIN: u32 = 2;
pub const BLE_APPEARANCE_UNKNOWN: u32 = 0;
pub const BLE_APPEARANCE_GENERIC_PHONE: u32 = 64;
pub const BLE_APPEARANCE_GENERIC_COMPUTER: u32 = 128;
pub const BLE_APPEARANCE_GENERIC_WATCH: u32 = 192;
pub const BLE_APPEARANCE_WATCH_SPORTS_WATCH: u32 = 193;
pub const BLE_APPEARANCE_GENERIC_CLOCK: u32 = 256;
pub const BLE_APPEARANCE_GENERIC_DISPLAY: u32 = 320;
pub const BLE_APPEARANCE_GENERIC_REMOTE_CONTROL: u32 = 384;
pub const BLE_APPEARANCE_GENERIC_EYE_GLASSES: u32 = 448;
pub const BLE_APPEARANCE_GENERIC_TAG: u32 = 512;
pub const BLE_APPEARANCE_GENERIC_KEYRING: u32 = 576;
pub const BLE_APPEARANCE_GENERIC_MEDIA_PLAYER: u32 = 640;
pub const BLE_APPEARANCE_GENERIC_BARCODE_SCANNER: u32 = 704;
pub const BLE_APPEARANCE_GENERIC_THERMOMETER: u32 = 768;
pub const BLE_APPEARANCE_THERMOMETER_EAR: u32 = 769;
pub const BLE_APPEARANCE_GENERIC_HEART_RATE_SENSOR: u32 = 832;
pub const BLE_APPEARANCE_HEART_RATE_SENSOR_HEART_RATE_BELT: u32 = 833;
pub const BLE_APPEARANCE_GENERIC_BLOOD_PRESSURE: u32 = 896;
pub const BLE_APPEARANCE_BLOOD_PRESSURE_ARM: u32 = 897;
pub const BLE_APPEARANCE_BLOOD_PRESSURE_WRIST: u32 = 898;
pub const BLE_APPEARANCE_GENERIC_HID: u32 = 960;
pub const BLE_APPEARANCE_HID_KEYBOARD: u32 = 961;
pub const BLE_APPEARANCE_HID_MOUSE: u32 = 962;
pub const BLE_APPEARANCE_HID_JOYSTICK: u32 = 963;
pub const BLE_APPEARANCE_HID_GAMEPAD: u32 = 964;
pub const BLE_APPEARANCE_HID_DIGITIZERSUBTYPE: u32 = 965;
pub const BLE_APPEARANCE_HID_CARD_READER: u32 = 966;
pub const BLE_APPEARANCE_HID_DIGITAL_PEN: u32 = 967;
pub const BLE_APPEARANCE_HID_BARCODE: u32 = 968;
pub const BLE_APPEARANCE_GENERIC_GLUCOSE_METER: u32 = 1024;
pub const BLE_APPEARANCE_GENERIC_RUNNING_WALKING_SENSOR: u32 = 1088;
pub const BLE_APPEARANCE_RUNNING_WALKING_SENSOR_IN_SHOE: u32 = 1089;
pub const BLE_APPEARANCE_RUNNING_WALKING_SENSOR_ON_SHOE: u32 = 1090;
pub const BLE_APPEARANCE_RUNNING_WALKING_SENSOR_ON_HIP: u32 = 1091;
pub const BLE_APPEARANCE_GENERIC_CYCLING: u32 = 1152;
pub const BLE_APPEARANCE_CYCLING_CYCLING_COMPUTER: u32 = 1153;
pub const BLE_APPEARANCE_CYCLING_SPEED_SENSOR: u32 = 1154;
pub const BLE_APPEARANCE_CYCLING_CADENCE_SENSOR: u32 = 1155;
pub const BLE_APPEARANCE_CYCLING_POWER_SENSOR: u32 = 1156;
pub const BLE_APPEARANCE_CYCLING_SPEED_CADENCE_SENSOR: u32 = 1157;
pub const BLE_APPEARANCE_GENERIC_PULSE_OXIMETER: u32 = 3136;
pub const BLE_APPEARANCE_PULSE_OXIMETER_FINGERTIP: u32 = 3137;
pub const BLE_APPEARANCE_PULSE_OXIMETER_WRIST_WORN: u32 = 3138;
pub const BLE_APPEARANCE_GENERIC_WEIGHT_SCALE: u32 = 3200;
pub const BLE_APPEARANCE_GENERIC_OUTDOOR_SPORTS_ACT: u32 = 5184;
pub const BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_DISP: u32 = 5185;
pub const BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_AND_NAV_DISP: u32 = 5186;
pub const BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_POD: u32 = 5187;
pub const BLE_APPEARANCE_OUTDOOR_SPORTS_ACT_LOC_AND_NAV_POD: u32 = 5188;
pub const BLE_ERROR_GAP_UUID_LIST_MISMATCH: u32 = 12800;
pub const BLE_ERROR_GAP_DISCOVERABLE_WITH_WHITELIST: u32 = 12801;
pub const BLE_ERROR_GAP_INVALID_BLE_ADDR: u32 = 12802;
pub const BLE_ERROR_GAP_WHITELIST_IN_USE: u32 = 12803;
pub const BLE_ERROR_GAP_DEVICE_IDENTITIES_IN_USE: u32 = 12804;
pub const BLE_ERROR_GAP_DEVICE_IDENTITIES_DUPLICATE: u32 = 12805;
pub const BLE_GAP_ROLE_INVALID: u32 = 0;
pub const BLE_GAP_ROLE_PERIPH: u32 = 1;
pub const BLE_GAP_ROLE_CENTRAL: u32 = 2;
pub const BLE_GAP_TIMEOUT_SRC_SCAN: u32 = 1;
pub const BLE_GAP_TIMEOUT_SRC_CONN: u32 = 2;
pub const BLE_GAP_TIMEOUT_SRC_AUTH_PAYLOAD: u32 = 3;
pub const BLE_GAP_ADDR_TYPE_PUBLIC: u32 = 0;
pub const BLE_GAP_ADDR_TYPE_RANDOM_STATIC: u32 = 1;
pub const BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE: u32 = 2;
pub const BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE: u32 = 3;
pub const BLE_GAP_ADDR_TYPE_ANONYMOUS: u32 = 127;
pub const BLE_GAP_DEFAULT_PRIVATE_ADDR_CYCLE_INTERVAL_S: u32 = 900;
pub const BLE_GAP_MAX_PRIVATE_ADDR_CYCLE_INTERVAL_S: u32 = 41400;
pub const BLE_GAP_ADDR_LEN: u32 = 6;
pub const BLE_GAP_PRIVACY_MODE_OFF: u32 = 0;
pub const BLE_GAP_PRIVACY_MODE_DEVICE_PRIVACY: u32 = 1;
pub const BLE_GAP_PRIVACY_MODE_NETWORK_PRIVACY: u32 = 2;
pub const BLE_GAP_POWER_LEVEL_INVALID: u32 = 127;
pub const BLE_GAP_ADV_SET_HANDLE_NOT_SET: u32 = 255;
pub const BLE_GAP_ADV_SET_COUNT_DEFAULT: u32 = 1;
pub const BLE_GAP_ADV_SET_COUNT_MAX: u32 = 1;
pub const BLE_GAP_ADV_SET_DATA_SIZE_MAX: u32 = 31;
pub const BLE_GAP_ADV_SET_DATA_SIZE_EXTENDED_MAX_SUPPORTED: u32 = 255;
pub const BLE_GAP_ADV_SET_DATA_SIZE_EXTENDED_CONNECTABLE_MAX_SUPPORTED: u32 = 238;
pub const BLE_GAP_ADV_REPORT_SET_ID_NOT_AVAILABLE: u32 = 255;
pub const BLE_GAP_EVT_ADV_SET_TERMINATED_REASON_TIMEOUT: u32 = 1;
pub const BLE_GAP_EVT_ADV_SET_TERMINATED_REASON_LIMIT_REACHED: u32 = 2;
pub const BLE_GAP_AD_TYPE_FLAGS: u32 = 1;
pub const BLE_GAP_AD_TYPE_16BIT_SERVICE_UUID_MORE_AVAILABLE: u32 = 2;
pub const BLE_GAP_AD_TYPE_16BIT_SERVICE_UUID_COMPLETE: u32 = 3;
pub const BLE_GAP_AD_TYPE_32BIT_SERVICE_UUID_MORE_AVAILABLE: u32 = 4;
pub const BLE_GAP_AD_TYPE_32BIT_SERVICE_UUID_COMPLETE: u32 = 5;
pub const BLE_GAP_AD_TYPE_128BIT_SERVICE_UUID_MORE_AVAILABLE: u32 = 6;
pub const BLE_GAP_AD_TYPE_128BIT_SERVICE_UUID_COMPLETE: u32 = 7;
pub const BLE_GAP_AD_TYPE_SHORT_LOCAL_NAME: u32 = 8;
pub const BLE_GAP_AD_TYPE_COMPLETE_LOCAL_NAME: u32 = 9;
pub const BLE_GAP_AD_TYPE_TX_POWER_LEVEL: u32 = 10;
pub const BLE_GAP_AD_TYPE_CLASS_OF_DEVICE: u32 = 13;
pub const BLE_GAP_AD_TYPE_SIMPLE_PAIRING_HASH_C: u32 = 14;
pub const BLE_GAP_AD_TYPE_SIMPLE_PAIRING_RANDOMIZER_R: u32 = 15;
pub const BLE_GAP_AD_TYPE_SECURITY_MANAGER_TK_VALUE: u32 = 16;
pub const BLE_GAP_AD_TYPE_SECURITY_MANAGER_OOB_FLAGS: u32 = 17;
pub const BLE_GAP_AD_TYPE_SLAVE_CONNECTION_INTERVAL_RANGE: u32 = 18;
pub const BLE_GAP_AD_TYPE_SOLICITED_SERVICE_UUIDS_16BIT: u32 = 20;
pub const BLE_GAP_AD_TYPE_SOLICITED_SERVICE_UUIDS_128BIT: u32 = 21;
pub const BLE_GAP_AD_TYPE_SERVICE_DATA: u32 = 22;
pub const BLE_GAP_AD_TYPE_PUBLIC_TARGET_ADDRESS: u32 = 23;
pub const BLE_GAP_AD_TYPE_RANDOM_TARGET_ADDRESS: u32 = 24;
pub const BLE_GAP_AD_TYPE_APPEARANCE: u32 = 25;
pub const BLE_GAP_AD_TYPE_ADVERTISING_INTERVAL: u32 = 26;
pub const BLE_GAP_AD_TYPE_LE_BLUETOOTH_DEVICE_ADDRESS: u32 = 27;
pub const BLE_GAP_AD_TYPE_LE_ROLE: u32 = 28;
pub const BLE_GAP_AD_TYPE_SIMPLE_PAIRING_HASH_C256: u32 = 29;
pub const BLE_GAP_AD_TYPE_SIMPLE_PAIRING_RANDOMIZER_R256: u32 = 30;
pub const BLE_GAP_AD_TYPE_SERVICE_DATA_32BIT_UUID: u32 = 32;
pub const BLE_GAP_AD_TYPE_SERVICE_DATA_128BIT_UUID: u32 = 33;
pub const BLE_GAP_AD_TYPE_LESC_CONFIRMATION_VALUE: u32 = 34;
pub const BLE_GAP_AD_TYPE_LESC_RANDOM_VALUE: u32 = 35;
pub const BLE_GAP_AD_TYPE_URI: u32 = 36;
pub const BLE_GAP_AD_TYPE_3D_INFORMATION_DATA: u32 = 61;
pub const BLE_GAP_AD_TYPE_MANUFACTURER_SPECIFIC_DATA: u32 = 255;
pub const BLE_GAP_ADV_FLAG_LE_LIMITED_DISC_MODE: u32 = 1;
pub const BLE_GAP_ADV_FLAG_LE_GENERAL_DISC_MODE: u32 = 2;
pub const BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED: u32 = 4;
pub const BLE_GAP_ADV_FLAG_LE_BR_EDR_CONTROLLER: u32 = 8;
pub const BLE_GAP_ADV_FLAG_LE_BR_EDR_HOST: u32 = 16;
pub const BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE: u32 = 5;
pub const BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE: u32 = 6;
pub const BLE_GAP_ADV_INTERVAL_MIN: u32 = 32;
pub const BLE_GAP_ADV_INTERVAL_MAX: u32 = 16384;
pub const BLE_GAP_SCAN_INTERVAL_MIN: u32 = 4;
pub const BLE_GAP_SCAN_INTERVAL_MAX: u32 = 65535;
pub const BLE_GAP_SCAN_WINDOW_MIN: u32 = 4;
pub const BLE_GAP_SCAN_WINDOW_MAX: u32 = 65535;
pub const BLE_GAP_SCAN_TIMEOUT_MIN: u32 = 1;
pub const BLE_GAP_SCAN_TIMEOUT_UNLIMITED: u32 = 0;
pub const BLE_GAP_SCAN_BUFFER_MIN: u32 = 31;
pub const BLE_GAP_SCAN_BUFFER_MAX: u32 = 31;
pub const BLE_GAP_SCAN_BUFFER_EXTENDED_MIN: u32 = 255;
pub const BLE_GAP_SCAN_BUFFER_EXTENDED_MAX: u32 = 1650;
pub const BLE_GAP_SCAN_BUFFER_EXTENDED_MAX_SUPPORTED: u32 = 255;
pub const BLE_GAP_ADV_TYPE_CONNECTABLE_SCANNABLE_UNDIRECTED: u32 = 1;
pub const BLE_GAP_ADV_TYPE_CONNECTABLE_NONSCANNABLE_DIRECTED_HIGH_DUTY_CYCLE: u32 = 2;
pub const BLE_GAP_ADV_TYPE_CONNECTABLE_NONSCANNABLE_DIRECTED: u32 = 3;
pub const BLE_GAP_ADV_TYPE_NONCONNECTABLE_SCANNABLE_UNDIRECTED: u32 = 4;
pub const BLE_GAP_ADV_TYPE_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED: u32 = 5;
pub const BLE_GAP_ADV_TYPE_EXTENDED_CONNECTABLE_NONSCANNABLE_UNDIRECTED: u32 = 6;
pub const BLE_GAP_ADV_TYPE_EXTENDED_CONNECTABLE_NONSCANNABLE_DIRECTED: u32 = 7;
pub const BLE_GAP_ADV_TYPE_EXTENDED_NONCONNECTABLE_SCANNABLE_UNDIRECTED: u32 = 8;
pub const BLE_GAP_ADV_TYPE_EXTENDED_NONCONNECTABLE_SCANNABLE_DIRECTED: u32 = 9;
pub const BLE_GAP_ADV_TYPE_EXTENDED_NONCONNECTABLE_NONSCANNABLE_UNDIRECTED: u32 = 10;
pub const BLE_GAP_ADV_TYPE_EXTENDED_NONCONNECTABLE_NONSCANNABLE_DIRECTED: u32 = 11;
pub const BLE_GAP_ADV_FP_ANY: u32 = 0;
pub const BLE_GAP_ADV_FP_FILTER_SCANREQ: u32 = 1;
pub const BLE_GAP_ADV_FP_FILTER_CONNREQ: u32 = 2;
pub const BLE_GAP_ADV_FP_FILTER_BOTH: u32 = 3;
pub const BLE_GAP_ADV_DATA_STATUS_COMPLETE: u32 = 0;
pub const BLE_GAP_ADV_DATA_STATUS_INCOMPLETE_MORE_DATA: u32 = 1;
pub const BLE_GAP_ADV_DATA_STATUS_INCOMPLETE_TRUNCATED: u32 = 2;
pub const BLE_GAP_ADV_DATA_STATUS_INCOMPLETE_MISSED: u32 = 3;
pub const BLE_GAP_SCAN_FP_ACCEPT_ALL: u32 = 0;
pub const BLE_GAP_SCAN_FP_WHITELIST: u32 = 1;
pub const BLE_GAP_SCAN_FP_ALL_NOT_RESOLVED_DIRECTED: u32 = 2;
pub const BLE_GAP_SCAN_FP_WHITELIST_NOT_RESOLVED_DIRECTED: u32 = 3;
pub const BLE_GAP_ADV_TIMEOUT_HIGH_DUTY_MAX: u32 = 128;
pub const BLE_GAP_ADV_TIMEOUT_LIMITED_MAX: u32 = 18000;
pub const BLE_GAP_ADV_TIMEOUT_GENERAL_UNLIMITED: u32 = 0;
pub const BLE_GAP_DISC_MODE_NOT_DISCOVERABLE: u32 = 0;
pub const BLE_GAP_DISC_MODE_LIMITED: u32 = 1;
pub const BLE_GAP_DISC_MODE_GENERAL: u32 = 2;
pub const BLE_GAP_IO_CAPS_DISPLAY_ONLY: u32 = 0;
pub const BLE_GAP_IO_CAPS_DISPLAY_YESNO: u32 = 1;
pub const BLE_GAP_IO_CAPS_KEYBOARD_ONLY: u32 = 2;
pub const BLE_GAP_IO_CAPS_NONE: u32 = 3;
pub const BLE_GAP_IO_CAPS_KEYBOARD_DISPLAY: u32 = 4;
pub const BLE_GAP_AUTH_KEY_TYPE_NONE: u32 = 0;
pub const BLE_GAP_AUTH_KEY_TYPE_PASSKEY: u32 = 1;
pub const BLE_GAP_AUTH_KEY_TYPE_OOB: u32 = 2;
pub const BLE_GAP_KP_NOT_TYPE_PASSKEY_START: u32 = 0;
pub const BLE_GAP_KP_NOT_TYPE_PASSKEY_DIGIT_IN: u32 = 1;
pub const BLE_GAP_KP_NOT_TYPE_PASSKEY_DIGIT_OUT: u32 = 2;
pub const BLE_GAP_KP_NOT_TYPE_PASSKEY_CLEAR: u32 = 3;
pub const BLE_GAP_KP_NOT_TYPE_PASSKEY_END: u32 = 4;
pub const BLE_GAP_SEC_STATUS_SUCCESS: u32 = 0;
pub const BLE_GAP_SEC_STATUS_TIMEOUT: u32 = 1;
pub const BLE_GAP_SEC_STATUS_PDU_INVALID: u32 = 2;
pub const BLE_GAP_SEC_STATUS_RFU_RANGE1_BEGIN: u32 = 3;
pub const BLE_GAP_SEC_STATUS_RFU_RANGE1_END: u32 = 128;
pub const BLE_GAP_SEC_STATUS_PASSKEY_ENTRY_FAILED: u32 = 129;
pub const BLE_GAP_SEC_STATUS_OOB_NOT_AVAILABLE: u32 = 130;
pub const BLE_GAP_SEC_STATUS_AUTH_REQ: u32 = 131;
pub const BLE_GAP_SEC_STATUS_CONFIRM_VALUE: u32 = 132;
pub const BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP: u32 = 133;
pub const BLE_GAP_SEC_STATUS_ENC_KEY_SIZE: u32 = 134;
pub const BLE_GAP_SEC_STATUS_SMP_CMD_UNSUPPORTED: u32 = 135;
pub const BLE_GAP_SEC_STATUS_UNSPECIFIED: u32 = 136;
pub const BLE_GAP_SEC_STATUS_REPEATED_ATTEMPTS: u32 = 137;
pub const BLE_GAP_SEC_STATUS_INVALID_PARAMS: u32 = 138;
pub const BLE_GAP_SEC_STATUS_DHKEY_FAILURE: u32 = 139;
pub const BLE_GAP_SEC_STATUS_NUM_COMP_FAILURE: u32 = 140;
pub const BLE_GAP_SEC_STATUS_BR_EDR_IN_PROG: u32 = 141;
pub const BLE_GAP_SEC_STATUS_X_TRANS_KEY_DISALLOWED: u32 = 142;
pub const BLE_GAP_SEC_STATUS_RFU_RANGE2_BEGIN: u32 = 143;
pub const BLE_GAP_SEC_STATUS_RFU_RANGE2_END: u32 = 255;
pub const BLE_GAP_SEC_STATUS_SOURCE_LOCAL: u32 = 0;
pub const BLE_GAP_SEC_STATUS_SOURCE_REMOTE: u32 = 1;
pub const BLE_GAP_CP_MIN_CONN_INTVL_NONE: u32 = 65535;
pub const BLE_GAP_CP_MIN_CONN_INTVL_MIN: u32 = 6;
pub const BLE_GAP_CP_MIN_CONN_INTVL_MAX: u32 = 3200;
pub const BLE_GAP_CP_MAX_CONN_INTVL_NONE: u32 = 65535;
pub const BLE_GAP_CP_MAX_CONN_INTVL_MIN: u32 = 6;
pub const BLE_GAP_CP_MAX_CONN_INTVL_MAX: u32 = 3200;
pub const BLE_GAP_CP_SLAVE_LATENCY_MAX: u32 = 499;
pub const BLE_GAP_CP_CONN_SUP_TIMEOUT_NONE: u32 = 65535;
pub const BLE_GAP_CP_CONN_SUP_TIMEOUT_MIN: u32 = 10;
pub const BLE_GAP_CP_CONN_SUP_TIMEOUT_MAX: u32 = 3200;
pub const BLE_GAP_DEVNAME_DEFAULT: &[u8; 6usize] = b"nRF5x\0";
pub const BLE_GAP_DEVNAME_DEFAULT_LEN: u32 = 31;
pub const BLE_GAP_DEVNAME_MAX_LEN: u32 = 248;
pub const BLE_GAP_RSSI_THRESHOLD_INVALID: u32 = 255;
pub const BLE_GAP_PHY_AUTO: u32 = 0;
pub const BLE_GAP_PHY_1MBPS: u32 = 1;
pub const BLE_GAP_PHY_2MBPS: u32 = 2;
pub const BLE_GAP_PHY_CODED: u32 = 4;
pub const BLE_GAP_PHY_NOT_SET: u32 = 255;
pub const BLE_GAP_PHYS_SUPPORTED: u32 = 7;
pub const BLE_GAP_SEC_RAND_LEN: u32 = 8;
pub const BLE_GAP_SEC_KEY_LEN: u32 = 16;
pub const BLE_GAP_LESC_P256_PK_LEN: u32 = 64;
pub const BLE_GAP_LESC_DHKEY_LEN: u32 = 32;
pub const BLE_GAP_PASSKEY_LEN: u32 = 6;
pub const BLE_GAP_WHITELIST_ADDR_MAX_COUNT: u32 = 8;
pub const BLE_GAP_DEVICE_IDENTITIES_MAX_COUNT: u32 = 8;
pub const BLE_GAP_CONN_COUNT_DEFAULT: u32 = 1;
pub const BLE_GAP_EVENT_LENGTH_MIN: u32 = 2;
pub const BLE_GAP_EVENT_LENGTH_CODED_PHY_MIN: u32 = 6;
pub const BLE_GAP_EVENT_LENGTH_DEFAULT: u32 = 3;
pub const BLE_GAP_ROLE_COUNT_PERIPH_DEFAULT: u32 = 1;
pub const BLE_GAP_ROLE_COUNT_CENTRAL_DEFAULT: u32 = 3;
pub const BLE_GAP_ROLE_COUNT_CENTRAL_SEC_DEFAULT: u32 = 1;
pub const BLE_GAP_ROLE_COUNT_COMBINED_MAX: u32 = 20;
pub const BLE_GAP_DATA_LENGTH_AUTO: u32 = 0;
pub const BLE_GAP_AUTH_PAYLOAD_TIMEOUT_MAX: u32 = 48000;
pub const BLE_GAP_AUTH_PAYLOAD_TIMEOUT_MIN: u32 = 1;
pub const BLE_GAP_SEC_MODE: u32 = 0;
pub const BLE_GAP_CHANNEL_COUNT: u32 = 40;
pub const BLE_GAP_QOS_CHANNEL_SURVEY_INTERVAL_CONTINUOUS: u32 = 0;
pub const BLE_GAP_QOS_CHANNEL_SURVEY_INTERVAL_MIN_US: u32 = 7500;
pub const BLE_GAP_QOS_CHANNEL_SURVEY_INTERVAL_MAX_US: u32 = 4000000;
pub const BLE_L2CAP_CH_COUNT_MAX: u32 = 64;
pub const BLE_L2CAP_MTU_MIN: u32 = 23;
pub const BLE_L2CAP_MPS_MIN: u32 = 23;
pub const BLE_L2CAP_CID_INVALID: u32 = 0;
pub const BLE_L2CAP_CREDITS_DEFAULT: u32 = 1;
pub const BLE_L2CAP_CH_SETUP_REFUSED_SRC_LOCAL: u32 = 1;
pub const BLE_L2CAP_CH_SETUP_REFUSED_SRC_REMOTE: u32 = 2;
pub const BLE_L2CAP_CH_STATUS_CODE_SUCCESS: u32 = 0;
pub const BLE_L2CAP_CH_STATUS_CODE_LE_PSM_NOT_SUPPORTED: u32 = 2;
pub const BLE_L2CAP_CH_STATUS_CODE_NO_RESOURCES: u32 = 4;
pub const BLE_L2CAP_CH_STATUS_CODE_INSUFF_AUTHENTICATION: u32 = 5;
pub const BLE_L2CAP_CH_STATUS_CODE_INSUFF_AUTHORIZATION: u32 = 6;
pub const BLE_L2CAP_CH_STATUS_CODE_INSUFF_ENC_KEY_SIZE: u32 = 7;
pub const BLE_L2CAP_CH_STATUS_CODE_INSUFF_ENC: u32 = 8;
pub const BLE_L2CAP_CH_STATUS_CODE_INVALID_SCID: u32 = 9;
pub const BLE_L2CAP_CH_STATUS_CODE_SCID_ALLOCATED: u32 = 10;
pub const BLE_L2CAP_CH_STATUS_CODE_UNACCEPTABLE_PARAMS: u32 = 11;
pub const BLE_L2CAP_CH_STATUS_CODE_NOT_UNDERSTOOD: u32 = 32768;
pub const BLE_L2CAP_CH_STATUS_CODE_TIMEOUT: u32 = 49152;
pub const BLE_GATT_ATT_MTU_DEFAULT: u32 = 23;
pub const BLE_GATT_HANDLE_INVALID: u32 = 0;
pub const BLE_GATT_HANDLE_START: u32 = 1;
pub const BLE_GATT_HANDLE_END: u32 = 65535;
pub const BLE_GATT_TIMEOUT_SRC_PROTOCOL: u32 = 0;
pub const BLE_GATT_OP_INVALID: u32 = 0;
pub const BLE_GATT_OP_WRITE_REQ: u32 = 1;
pub const BLE_GATT_OP_WRITE_CMD: u32 = 2;
pub const BLE_GATT_OP_SIGN_WRITE_CMD: u32 = 3;
pub const BLE_GATT_OP_PREP_WRITE_REQ: u32 = 4;
pub const BLE_GATT_OP_EXEC_WRITE_REQ: u32 = 5;
pub const BLE_GATT_EXEC_WRITE_FLAG_PREPARED_CANCEL: u32 = 0;
pub const BLE_GATT_EXEC_WRITE_FLAG_PREPARED_WRITE: u32 = 1;
pub const BLE_GATT_HVX_INVALID: u32 = 0;
pub const BLE_GATT_HVX_NOTIFICATION: u32 = 1;
pub const BLE_GATT_HVX_INDICATION: u32 = 2;
pub const BLE_GATT_STATUS_SUCCESS: u32 = 0;
pub const BLE_GATT_STATUS_UNKNOWN: u32 = 1;
pub const BLE_GATT_STATUS_ATTERR_INVALID: u32 = 256;
pub const BLE_GATT_STATUS_ATTERR_INVALID_HANDLE: u32 = 257;
pub const BLE_GATT_STATUS_ATTERR_READ_NOT_PERMITTED: u32 = 258;
pub const BLE_GATT_STATUS_ATTERR_WRITE_NOT_PERMITTED: u32 = 259;
pub const BLE_GATT_STATUS_ATTERR_INVALID_PDU: u32 = 260;
pub const BLE_GATT_STATUS_ATTERR_INSUF_AUTHENTICATION: u32 = 261;
pub const BLE_GATT_STATUS_ATTERR_REQUEST_NOT_SUPPORTED: u32 = 262;
pub const BLE_GATT_STATUS_ATTERR_INVALID_OFFSET: u32 = 263;
pub const BLE_GATT_STATUS_ATTERR_INSUF_AUTHORIZATION: u32 = 264;
pub const BLE_GATT_STATUS_ATTERR_PREPARE_QUEUE_FULL: u32 = 265;
pub const BLE_GATT_STATUS_ATTERR_ATTRIBUTE_NOT_FOUND: u32 = 266;
pub const BLE_GATT_STATUS_ATTERR_ATTRIBUTE_NOT_LONG: u32 = 267;
pub const BLE_GATT_STATUS_ATTERR_INSUF_ENC_KEY_SIZE: u32 = 268;
pub const BLE_GATT_STATUS_ATTERR_INVALID_ATT_VAL_LENGTH: u32 = 269;
pub const BLE_GATT_STATUS_ATTERR_UNLIKELY_ERROR: u32 = 270;
pub const BLE_GATT_STATUS_ATTERR_INSUF_ENCRYPTION: u32 = 271;
pub const BLE_GATT_STATUS_ATTERR_UNSUPPORTED_GROUP_TYPE: u32 = 272;
pub const BLE_GATT_STATUS_ATTERR_INSUF_RESOURCES: u32 = 273;
pub const BLE_GATT_STATUS_ATTERR_RFU_RANGE1_BEGIN: u32 = 274;
pub const BLE_GATT_STATUS_ATTERR_RFU_RANGE1_END: u32 = 383;
pub const BLE_GATT_STATUS_ATTERR_APP_BEGIN: u32 = 384;
pub const BLE_GATT_STATUS_ATTERR_APP_END: u32 = 415;
pub const BLE_GATT_STATUS_ATTERR_RFU_RANGE2_BEGIN: u32 = 416;
pub const BLE_GATT_STATUS_ATTERR_RFU_RANGE2_END: u32 = 479;
pub const BLE_GATT_STATUS_ATTERR_RFU_RANGE3_BEGIN: u32 = 480;
pub const BLE_GATT_STATUS_ATTERR_RFU_RANGE3_END: u32 = 508;
pub const BLE_GATT_STATUS_ATTERR_CPS_WRITE_REQ_REJECTED: u32 = 508;
pub const BLE_GATT_STATUS_ATTERR_CPS_CCCD_CONFIG_ERROR: u32 = 509;
pub const BLE_GATT_STATUS_ATTERR_CPS_PROC_ALR_IN_PROG: u32 = 510;
pub const BLE_GATT_STATUS_ATTERR_CPS_OUT_OF_RANGE: u32 = 511;
pub const BLE_GATT_CPF_FORMAT_RFU: u32 = 0;
pub const BLE_GATT_CPF_FORMAT_BOOLEAN: u32 = 1;
pub const BLE_GATT_CPF_FORMAT_2BIT: u32 = 2;
pub const BLE_GATT_CPF_FORMAT_NIBBLE: u32 = 3;
pub const BLE_GATT_CPF_FORMAT_UINT8: u32 = 4;
pub const BLE_GATT_CPF_FORMAT_UINT12: u32 = 5;
pub const BLE_GATT_CPF_FORMAT_UINT16: u32 = 6;
pub const BLE_GATT_CPF_FORMAT_UINT24: u32 = 7;
pub const BLE_GATT_CPF_FORMAT_UINT32: u32 = 8;
pub const BLE_GATT_CPF_FORMAT_UINT48: u32 = 9;
pub const BLE_GATT_CPF_FORMAT_UINT64: u32 = 10;
pub const BLE_GATT_CPF_FORMAT_UINT128: u32 = 11;
pub const BLE_GATT_CPF_FORMAT_SINT8: u32 = 12;
pub const BLE_GATT_CPF_FORMAT_SINT12: u32 = 13;
pub const BLE_GATT_CPF_FORMAT_SINT16: u32 = 14;
pub const BLE_GATT_CPF_FORMAT_SINT24: u32 = 15;
pub const BLE_GATT_CPF_FORMAT_SINT32: u32 = 16;
pub const BLE_GATT_CPF_FORMAT_SINT48: u32 = 17;
pub const BLE_GATT_CPF_FORMAT_SINT64: u32 = 18;
pub const BLE_GATT_CPF_FORMAT_SINT128: u32 = 19;
pub const BLE_GATT_CPF_FORMAT_FLOAT32: u32 = 20;
pub const BLE_GATT_CPF_FORMAT_FLOAT64: u32 = 21;
pub const BLE_GATT_CPF_FORMAT_SFLOAT: u32 = 22;
pub const BLE_GATT_CPF_FORMAT_FLOAT: u32 = 23;
pub const BLE_GATT_CPF_FORMAT_DUINT16: u32 = 24;
pub const BLE_GATT_CPF_FORMAT_UTF8S: u32 = 25;
pub const BLE_GATT_CPF_FORMAT_UTF16S: u32 = 26;
pub const BLE_GATT_CPF_FORMAT_STRUCT: u32 = 27;
pub const BLE_GATT_CPF_NAMESPACE_BTSIG: u32 = 1;
pub const BLE_GATT_CPF_NAMESPACE_DESCRIPTION_UNKNOWN: u32 = 0;
pub const BLE_ERROR_GATTC_PROC_NOT_PERMITTED: u32 = 13056;
pub const BLE_GATTC_ATTR_INFO_FORMAT_16BIT: u32 = 1;
pub const BLE_GATTC_ATTR_INFO_FORMAT_128BIT: u32 = 2;
pub const BLE_GATTC_WRITE_CMD_TX_QUEUE_SIZE_DEFAULT: u32 = 1;
pub const BLE_ERROR_GATTS_INVALID_ATTR_TYPE: u32 = 13312;
pub const BLE_ERROR_GATTS_SYS_ATTR_MISSING: u32 = 13313;
pub const BLE_GATTS_FIX_ATTR_LEN_MAX: u32 = 510;
pub const BLE_GATTS_VAR_ATTR_LEN_MAX: u32 = 512;
pub const BLE_GATTS_SRVC_TYPE_INVALID: u32 = 0;
pub const BLE_GATTS_SRVC_TYPE_PRIMARY: u32 = 1;
pub const BLE_GATTS_SRVC_TYPE_SECONDARY: u32 = 2;
pub const BLE_GATTS_ATTR_TYPE_INVALID: u32 = 0;
pub const BLE_GATTS_ATTR_TYPE_PRIM_SRVC_DECL: u32 = 1;
pub const BLE_GATTS_ATTR_TYPE_SEC_SRVC_DECL: u32 = 2;
pub const BLE_GATTS_ATTR_TYPE_INC_DECL: u32 = 3;
pub const BLE_GATTS_ATTR_TYPE_CHAR_DECL: u32 = 4;
pub const BLE_GATTS_ATTR_TYPE_CHAR_VAL: u32 = 5;
pub const BLE_GATTS_ATTR_TYPE_DESC: u32 = 6;
pub const BLE_GATTS_ATTR_TYPE_OTHER: u32 = 7;
pub const BLE_GATTS_OP_INVALID: u32 = 0;
pub const BLE_GATTS_OP_WRITE_REQ: u32 = 1;
pub const BLE_GATTS_OP_WRITE_CMD: u32 = 2;
pub const BLE_GATTS_OP_SIGN_WRITE_CMD: u32 = 3;
pub const BLE_GATTS_OP_PREP_WRITE_REQ: u32 = 4;
pub const BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL: u32 = 5;
pub const BLE_GATTS_OP_EXEC_WRITE_REQ_NOW: u32 = 6;
pub const BLE_GATTS_VLOC_INVALID: u32 = 0;
pub const BLE_GATTS_VLOC_STACK: u32 = 1;
pub const BLE_GATTS_VLOC_USER: u32 = 2;
pub const BLE_GATTS_AUTHORIZE_TYPE_INVALID: u32 = 0;
pub const BLE_GATTS_AUTHORIZE_TYPE_READ: u32 = 1;
pub const BLE_GATTS_AUTHORIZE_TYPE_WRITE: u32 = 2;
pub const BLE_GATTS_SYS_ATTR_FLAG_SYS_SRVCS: u32 = 1;
pub const BLE_GATTS_SYS_ATTR_FLAG_USR_SRVCS: u32 = 2;
pub const BLE_GATTS_SERVICE_CHANGED_DEFAULT: u32 = 1;
pub const BLE_GATTS_ATTR_TAB_SIZE_MIN: u32 = 248;
pub const BLE_GATTS_ATTR_TAB_SIZE_DEFAULT: u32 = 1408;
pub const BLE_GATTS_HVN_TX_QUEUE_SIZE_DEFAULT: u32 = 1;
pub const BLE_EVT_PTR_ALIGNMENT: u32 = 4;
pub const BLE_USER_MEM_TYPE_INVALID: u32 = 0;
pub const BLE_USER_MEM_TYPE_GATTS_QUEUED_WRITES: u32 = 1;
pub const BLE_UUID_VS_COUNT_DEFAULT: u32 = 10;
pub const BLE_UUID_VS_COUNT_MAX: u32 = 254;
pub const BLE_CONN_CFG_TAG_DEFAULT: u32 = 0;
pub const SD_RPC_MAXPATHLEN: u32 = 512;
pub const NRF_ERROR_SD_RPC_BASE_NUM: u32 = 32768;
pub const NRF_ERROR_SD_RPC_ENCODE: u32 = 32769;
pub const NRF_ERROR_SD_RPC_DECODE: u32 = 32770;
pub const NRF_ERROR_SD_RPC_SEND: u32 = 32771;
pub const NRF_ERROR_SD_RPC_INVALID_ARGUMENT: u32 = 32772;
pub const NRF_ERROR_SD_RPC_NO_RESPONSE: u32 = 32773;
pub const NRF_ERROR_SD_RPC_INVALID_STATE: u32 = 32774;
pub const NRF_ERROR_SD_RPC_SERIALIZATION_TRANSPORT: u32 = 32788;
pub const NRF_ERROR_SD_RPC_SERIALIZATION_TRANSPORT_INVALID_STATE: u32 = 32789;
pub const NRF_ERROR_SD_RPC_SERIALIZATION_TRANSPORT_NO_RESPONSE: u32 = 32790;
pub const NRF_ERROR_SD_RPC_SERIALIZATION_TRANSPORT_ALREADY_OPEN: u32 = 32791;
pub const NRF_ERROR_SD_RPC_SERIALIZATION_TRANSPORT_ALREADY_CLOSED: u32 = 32792;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT: u32 = 32808;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT_STATE: u32 = 32809;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT_NO_RESPONSE: u32 = 32810;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT_SLIP_PAYLOAD_SIZE: u32 = 32811;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT_SLIP_CALCULATED_PAYLOAD_SIZE: u32 = 32812;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT_SLIP_DECODING: u32 = 32813;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT_HEADER_CHECKSUM: u32 = 32814;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT_PACKET_CHECKSUM: u32 = 32815;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT_ALREADY_OPEN: u32 = 32816;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT_ALREADY_CLOSED: u32 = 32817;
pub const NRF_ERROR_SD_RPC_H5_TRANSPORT_INTERNAL_ERROR: u32 = 32818;
pub const NRF_ERROR_SD_RPC_SERIAL_PORT: u32 = 32828;
pub const NRF_ERROR_SD_RPC_SERIAL_PORT_STATE: u32 = 32829;
pub const NRF_ERROR_SD_RPC_SERIAL_PORT_ALREADY_OPEN: u32 = 32830;
pub const NRF_ERROR_SD_RPC_SERIAL_PORT_ALREADY_CLOSED: u32 = 32831;
pub const NRF_ERROR_SD_RPC_SERIAL_PORT_INTERNAL_ERROR: u32 = 32832;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adapter_t {
    pub internal: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_adapter_t() {
    assert_eq!(
        ::std::mem::size_of::<adapter_t>(),
        8usize,
        concat!("Size of: ", stringify!(adapter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<adapter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(adapter_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<adapter_t>())).internal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(adapter_t),
            "::",
            stringify!(internal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct transport_layer_t {
    pub internal: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_transport_layer_t() {
    assert_eq!(
        ::std::mem::size_of::<transport_layer_t>(),
        8usize,
        concat!("Size of: ", stringify!(transport_layer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<transport_layer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(transport_layer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<transport_layer_t>())).internal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(transport_layer_t),
            "::",
            stringify!(internal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct data_link_layer_t {
    pub internal: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_data_link_layer_t() {
    assert_eq!(
        ::std::mem::size_of::<data_link_layer_t>(),
        8usize,
        concat!("Size of: ", stringify!(data_link_layer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<data_link_layer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(data_link_layer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<data_link_layer_t>())).internal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(data_link_layer_t),
            "::",
            stringify!(internal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physical_layer_t {
    pub internal: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_physical_layer_t() {
    assert_eq!(
        ::std::mem::size_of::<physical_layer_t>(),
        8usize,
        concat!("Size of: ", stringify!(physical_layer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<physical_layer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(physical_layer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physical_layer_t>())).internal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physical_layer_t),
            "::",
            stringify!(internal)
        )
    );
}
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_uuid128_t {
    pub uuid128: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_ble_uuid128_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_uuid128_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_uuid128_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_uuid128_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_uuid128_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_uuid128_t>())).uuid128 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_uuid128_t),
            "::",
            stringify!(uuid128)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_uuid_t {
    pub uuid: u16,
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_ble_uuid_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_uuid_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_uuid_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_uuid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_uuid_t>())).uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_uuid_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_uuid_t>())).type_ as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_uuid_t),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_data_t {
    pub p_data: *mut u8,
    pub len: u16,
}
#[test]
fn bindgen_test_layout_ble_data_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_data_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_data_t>())).p_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_data_t),
            "::",
            stringify!(p_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_data_t>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_data_t),
            "::",
            stringify!(len)
        )
    );
}
pub const BLE_GAP_SVCS_SD_BLE_GAP_ADDR_SET: BLE_GAP_SVCS = 108;
pub const BLE_GAP_SVCS_SD_BLE_GAP_ADDR_GET: BLE_GAP_SVCS = 109;
pub const BLE_GAP_SVCS_SD_BLE_GAP_WHITELIST_SET: BLE_GAP_SVCS = 110;
pub const BLE_GAP_SVCS_SD_BLE_GAP_DEVICE_IDENTITIES_SET: BLE_GAP_SVCS = 111;
pub const BLE_GAP_SVCS_SD_BLE_GAP_PRIVACY_SET: BLE_GAP_SVCS = 112;
pub const BLE_GAP_SVCS_SD_BLE_GAP_PRIVACY_GET: BLE_GAP_SVCS = 113;
pub const BLE_GAP_SVCS_SD_BLE_GAP_ADV_SET_CONFIGURE: BLE_GAP_SVCS = 114;
pub const BLE_GAP_SVCS_SD_BLE_GAP_ADV_START: BLE_GAP_SVCS = 115;
pub const BLE_GAP_SVCS_SD_BLE_GAP_ADV_STOP: BLE_GAP_SVCS = 116;
pub const BLE_GAP_SVCS_SD_BLE_GAP_CONN_PARAM_UPDATE: BLE_GAP_SVCS = 117;
pub const BLE_GAP_SVCS_SD_BLE_GAP_DISCONNECT: BLE_GAP_SVCS = 118;
pub const BLE_GAP_SVCS_SD_BLE_GAP_TX_POWER_SET: BLE_GAP_SVCS = 119;
pub const BLE_GAP_SVCS_SD_BLE_GAP_APPEARANCE_SET: BLE_GAP_SVCS = 120;
pub const BLE_GAP_SVCS_SD_BLE_GAP_APPEARANCE_GET: BLE_GAP_SVCS = 121;
pub const BLE_GAP_SVCS_SD_BLE_GAP_PPCP_SET: BLE_GAP_SVCS = 122;
pub const BLE_GAP_SVCS_SD_BLE_GAP_PPCP_GET: BLE_GAP_SVCS = 123;
pub const BLE_GAP_SVCS_SD_BLE_GAP_DEVICE_NAME_SET: BLE_GAP_SVCS = 124;
pub const BLE_GAP_SVCS_SD_BLE_GAP_DEVICE_NAME_GET: BLE_GAP_SVCS = 125;
pub const BLE_GAP_SVCS_SD_BLE_GAP_AUTHENTICATE: BLE_GAP_SVCS = 126;
pub const BLE_GAP_SVCS_SD_BLE_GAP_SEC_PARAMS_REPLY: BLE_GAP_SVCS = 127;
pub const BLE_GAP_SVCS_SD_BLE_GAP_AUTH_KEY_REPLY: BLE_GAP_SVCS = 128;
pub const BLE_GAP_SVCS_SD_BLE_GAP_LESC_DHKEY_REPLY: BLE_GAP_SVCS = 129;
pub const BLE_GAP_SVCS_SD_BLE_GAP_KEYPRESS_NOTIFY: BLE_GAP_SVCS = 130;
pub const BLE_GAP_SVCS_SD_BLE_GAP_LESC_OOB_DATA_GET: BLE_GAP_SVCS = 131;
pub const BLE_GAP_SVCS_SD_BLE_GAP_LESC_OOB_DATA_SET: BLE_GAP_SVCS = 132;
pub const BLE_GAP_SVCS_SD_BLE_GAP_ENCRYPT: BLE_GAP_SVCS = 133;
pub const BLE_GAP_SVCS_SD_BLE_GAP_SEC_INFO_REPLY: BLE_GAP_SVCS = 134;
pub const BLE_GAP_SVCS_SD_BLE_GAP_CONN_SEC_GET: BLE_GAP_SVCS = 135;
pub const BLE_GAP_SVCS_SD_BLE_GAP_RSSI_START: BLE_GAP_SVCS = 136;
pub const BLE_GAP_SVCS_SD_BLE_GAP_RSSI_STOP: BLE_GAP_SVCS = 137;
pub const BLE_GAP_SVCS_SD_BLE_GAP_SCAN_START: BLE_GAP_SVCS = 138;
pub const BLE_GAP_SVCS_SD_BLE_GAP_SCAN_STOP: BLE_GAP_SVCS = 139;
pub const BLE_GAP_SVCS_SD_BLE_GAP_CONNECT: BLE_GAP_SVCS = 140;
pub const BLE_GAP_SVCS_SD_BLE_GAP_CONNECT_CANCEL: BLE_GAP_SVCS = 141;
pub const BLE_GAP_SVCS_SD_BLE_GAP_RSSI_GET: BLE_GAP_SVCS = 142;
pub const BLE_GAP_SVCS_SD_BLE_GAP_PHY_UPDATE: BLE_GAP_SVCS = 143;
pub const BLE_GAP_SVCS_SD_BLE_GAP_DATA_LENGTH_UPDATE: BLE_GAP_SVCS = 144;
pub const BLE_GAP_SVCS_SD_BLE_GAP_QOS_CHANNEL_SURVEY_START: BLE_GAP_SVCS = 145;
pub const BLE_GAP_SVCS_SD_BLE_GAP_QOS_CHANNEL_SURVEY_STOP: BLE_GAP_SVCS = 146;
pub const BLE_GAP_SVCS_SD_BLE_GAP_ADV_ADDR_GET: BLE_GAP_SVCS = 147;
pub type BLE_GAP_SVCS = u32;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_CONNECTED: BLE_GAP_EVTS = 16;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_DISCONNECTED: BLE_GAP_EVTS = 17;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_CONN_PARAM_UPDATE: BLE_GAP_EVTS = 18;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_SEC_PARAMS_REQUEST: BLE_GAP_EVTS = 19;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_SEC_INFO_REQUEST: BLE_GAP_EVTS = 20;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_PASSKEY_DISPLAY: BLE_GAP_EVTS = 21;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_KEY_PRESSED: BLE_GAP_EVTS = 22;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_AUTH_KEY_REQUEST: BLE_GAP_EVTS = 23;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_LESC_DHKEY_REQUEST: BLE_GAP_EVTS = 24;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_AUTH_STATUS: BLE_GAP_EVTS = 25;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_CONN_SEC_UPDATE: BLE_GAP_EVTS = 26;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_TIMEOUT: BLE_GAP_EVTS = 27;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_RSSI_CHANGED: BLE_GAP_EVTS = 28;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_ADV_REPORT: BLE_GAP_EVTS = 29;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_SEC_REQUEST: BLE_GAP_EVTS = 30;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST: BLE_GAP_EVTS = 31;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_SCAN_REQ_REPORT: BLE_GAP_EVTS = 32;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_PHY_UPDATE_REQUEST: BLE_GAP_EVTS = 33;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_PHY_UPDATE: BLE_GAP_EVTS = 34;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_DATA_LENGTH_UPDATE_REQUEST: BLE_GAP_EVTS = 35;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_DATA_LENGTH_UPDATE: BLE_GAP_EVTS = 36;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_QOS_CHANNEL_SURVEY_REPORT: BLE_GAP_EVTS = 37;
pub const BLE_GAP_EVTS_BLE_GAP_EVT_ADV_SET_TERMINATED: BLE_GAP_EVTS = 38;
pub type BLE_GAP_EVTS = u32;
pub const BLE_GAP_OPTS_BLE_GAP_OPT_CH_MAP: BLE_GAP_OPTS = 32;
pub const BLE_GAP_OPTS_BLE_GAP_OPT_LOCAL_CONN_LATENCY: BLE_GAP_OPTS = 33;
pub const BLE_GAP_OPTS_BLE_GAP_OPT_PASSKEY: BLE_GAP_OPTS = 34;
pub const BLE_GAP_OPTS_BLE_GAP_OPT_COMPAT_MODE_1: BLE_GAP_OPTS = 35;
pub const BLE_GAP_OPTS_BLE_GAP_OPT_AUTH_PAYLOAD_TIMEOUT: BLE_GAP_OPTS = 36;
pub const BLE_GAP_OPTS_BLE_GAP_OPT_SLAVE_LATENCY_DISABLE: BLE_GAP_OPTS = 37;
pub type BLE_GAP_OPTS = u32;
pub const BLE_GAP_CFGS_BLE_GAP_CFG_ROLE_COUNT: BLE_GAP_CFGS = 64;
pub const BLE_GAP_CFGS_BLE_GAP_CFG_DEVICE_NAME: BLE_GAP_CFGS = 65;
pub type BLE_GAP_CFGS = u32;
pub const BLE_GAP_TX_POWER_ROLES_BLE_GAP_TX_POWER_ROLE_ADV: BLE_GAP_TX_POWER_ROLES = 1;
pub const BLE_GAP_TX_POWER_ROLES_BLE_GAP_TX_POWER_ROLE_SCAN_INIT: BLE_GAP_TX_POWER_ROLES = 2;
pub const BLE_GAP_TX_POWER_ROLES_BLE_GAP_TX_POWER_ROLE_CONN: BLE_GAP_TX_POWER_ROLES = 3;
pub type BLE_GAP_TX_POWER_ROLES = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_adv_properties_t {
    pub type_: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_adv_properties_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_adv_properties_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_gap_adv_properties_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_adv_properties_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_adv_properties_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_adv_properties_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_properties_t),
            "::",
            stringify!(type_)
        )
    );
}
impl ble_gap_adv_properties_t {
    #[inline]
    pub fn anonymous(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_anonymous(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn include_tx_power(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_include_tx_power(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        anonymous: u8,
        include_tx_power: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let anonymous: u8 = unsafe { ::std::mem::transmute(anonymous) };
            anonymous as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let include_tx_power: u8 = unsafe { ::std::mem::transmute(include_tx_power) };
            include_tx_power as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_adv_report_type_t {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_adv_report_type_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_adv_report_type_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_gap_adv_report_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_adv_report_type_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_adv_report_type_t))
    );
}
impl ble_gap_adv_report_type_t {
    #[inline]
    pub fn connectable(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_connectable(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scannable(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_scannable(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn directed(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_directed(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_response(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_scan_response(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn extended_pdu(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_extended_pdu(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn status(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_status(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        connectable: u16,
        scannable: u16,
        directed: u16,
        scan_response: u16,
        extended_pdu: u16,
        status: u16,
        reserved: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let connectable: u16 = unsafe { ::std::mem::transmute(connectable) };
            connectable as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let scannable: u16 = unsafe { ::std::mem::transmute(scannable) };
            scannable as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let directed: u16 = unsafe { ::std::mem::transmute(directed) };
            directed as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let scan_response: u16 = unsafe { ::std::mem::transmute(scan_response) };
            scan_response as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let extended_pdu: u16 = unsafe { ::std::mem::transmute(extended_pdu) };
            extended_pdu as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let status: u16 = unsafe { ::std::mem::transmute(status) };
            status as u64
        });
        __bindgen_bitfield_unit.set(7usize, 9u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_aux_pointer_t {
    pub aux_offset: u16,
    pub aux_phy: u8,
}
#[test]
fn bindgen_test_layout_ble_gap_aux_pointer_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_aux_pointer_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_gap_aux_pointer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_aux_pointer_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_aux_pointer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_aux_pointer_t>())).aux_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_aux_pointer_t),
            "::",
            stringify!(aux_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_aux_pointer_t>())).aux_phy as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_aux_pointer_t),
            "::",
            stringify!(aux_phy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_addr_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub addr: [u8; 6usize],
}
#[test]
fn bindgen_test_layout_ble_gap_addr_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_addr_t>(),
        7usize,
        concat!("Size of: ", stringify!(ble_gap_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_addr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_addr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_addr_t>())).addr as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_addr_t),
            "::",
            stringify!(addr)
        )
    );
}
impl ble_gap_addr_t {
    #[inline]
    pub fn addr_id_peer(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_addr_id_peer(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn addr_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_addr_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(addr_id_peer: u8, addr_type: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let addr_id_peer: u8 = unsafe { ::std::mem::transmute(addr_id_peer) };
            addr_id_peer as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let addr_type: u8 = unsafe { ::std::mem::transmute(addr_type) };
            addr_type as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_conn_params_t {
    pub min_conn_interval: u16,
    pub max_conn_interval: u16,
    pub slave_latency: u16,
    pub conn_sup_timeout: u16,
}
#[test]
fn bindgen_test_layout_ble_gap_conn_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_conn_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gap_conn_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_conn_params_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_conn_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_conn_params_t>())).min_conn_interval as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_conn_params_t),
            "::",
            stringify!(min_conn_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_conn_params_t>())).max_conn_interval as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_conn_params_t),
            "::",
            stringify!(max_conn_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_conn_params_t>())).slave_latency as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_conn_params_t),
            "::",
            stringify!(slave_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_conn_params_t>())).conn_sup_timeout as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_conn_params_t),
            "::",
            stringify!(conn_sup_timeout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_conn_sec_mode_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_conn_sec_mode_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_conn_sec_mode_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gap_conn_sec_mode_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_conn_sec_mode_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_conn_sec_mode_t))
    );
}
impl ble_gap_conn_sec_mode_t {
    #[inline]
    pub fn sm(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_sm(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn lv(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_lv(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(sm: u8, lv: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let sm: u8 = unsafe { ::std::mem::transmute(sm) };
            sm as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let lv: u8 = unsafe { ::std::mem::transmute(lv) };
            lv as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_conn_sec_t {
    pub sec_mode: ble_gap_conn_sec_mode_t,
    pub encr_key_size: u8,
}
#[test]
fn bindgen_test_layout_ble_gap_conn_sec_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_conn_sec_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_gap_conn_sec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_conn_sec_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_conn_sec_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_conn_sec_t>())).sec_mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_conn_sec_t),
            "::",
            stringify!(sec_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_conn_sec_t>())).encr_key_size as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_conn_sec_t),
            "::",
            stringify!(encr_key_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_irk_t {
    pub irk: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_ble_gap_irk_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_irk_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gap_irk_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_irk_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_irk_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_irk_t>())).irk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_irk_t),
            "::",
            stringify!(irk)
        )
    );
}
pub type ble_gap_ch_mask_t = [u8; 5usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_adv_params_t {
    pub properties: ble_gap_adv_properties_t,
    pub p_peer_addr: *const ble_gap_addr_t,
    pub interval: u32,
    pub duration: u16,
    pub max_adv_evts: u8,
    pub channel_mask: ble_gap_ch_mask_t,
    pub filter_policy: u8,
    pub primary_phy: u8,
    pub secondary_phy: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_adv_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_adv_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(ble_gap_adv_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_adv_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_adv_params_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_adv_params_t>())).properties as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_params_t),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_adv_params_t>())).p_peer_addr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_params_t),
            "::",
            stringify!(p_peer_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_adv_params_t>())).interval as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_params_t),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_adv_params_t>())).duration as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_params_t),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_adv_params_t>())).max_adv_evts as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_params_t),
            "::",
            stringify!(max_adv_evts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_adv_params_t>())).channel_mask as *const _ as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_params_t),
            "::",
            stringify!(channel_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_adv_params_t>())).filter_policy as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_params_t),
            "::",
            stringify!(filter_policy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_adv_params_t>())).primary_phy as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_params_t),
            "::",
            stringify!(primary_phy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_adv_params_t>())).secondary_phy as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_params_t),
            "::",
            stringify!(secondary_phy)
        )
    );
}
impl ble_gap_adv_params_t {
    #[inline]
    pub fn set_id(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_set_id(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_req_notification(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_scan_req_notification(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        set_id: u8,
        scan_req_notification: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let set_id: u8 = unsafe { ::std::mem::transmute(set_id) };
            set_id as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let scan_req_notification: u8 = unsafe { ::std::mem::transmute(scan_req_notification) };
            scan_req_notification as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_adv_data_t {
    pub adv_data: ble_data_t,
    pub scan_rsp_data: ble_data_t,
}
#[test]
fn bindgen_test_layout_ble_gap_adv_data_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_adv_data_t>(),
        32usize,
        concat!("Size of: ", stringify!(ble_gap_adv_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_adv_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_adv_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_adv_data_t>())).adv_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_data_t),
            "::",
            stringify!(adv_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_adv_data_t>())).scan_rsp_data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_adv_data_t),
            "::",
            stringify!(scan_rsp_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_scan_params_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub scan_phys: u8,
    pub interval: u16,
    pub window: u16,
    pub timeout: u16,
    pub channel_mask: ble_gap_ch_mask_t,
}
#[test]
fn bindgen_test_layout_ble_gap_scan_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_scan_params_t>(),
        14usize,
        concat!("Size of: ", stringify!(ble_gap_scan_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_scan_params_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_scan_params_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_scan_params_t>())).scan_phys as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_scan_params_t),
            "::",
            stringify!(scan_phys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_scan_params_t>())).interval as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_scan_params_t),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_scan_params_t>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_scan_params_t),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_scan_params_t>())).timeout as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_scan_params_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_scan_params_t>())).channel_mask as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_scan_params_t),
            "::",
            stringify!(channel_mask)
        )
    );
}
impl ble_gap_scan_params_t {
    #[inline]
    pub fn extended(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_extended(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn report_incomplete_evts(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_report_incomplete_evts(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn active(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_active(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn filter_policy(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_filter_policy(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        extended: u8,
        report_incomplete_evts: u8,
        active: u8,
        filter_policy: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let extended: u8 = unsafe { ::std::mem::transmute(extended) };
            extended as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let report_incomplete_evts: u8 =
                unsafe { ::std::mem::transmute(report_incomplete_evts) };
            report_incomplete_evts as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let active: u8 = unsafe { ::std::mem::transmute(active) };
            active as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let filter_policy: u8 = unsafe { ::std::mem::transmute(filter_policy) };
            filter_policy as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_privacy_params_t {
    pub privacy_mode: u8,
    pub private_addr_type: u8,
    pub private_addr_cycle_s: u16,
    pub p_device_irk: *mut ble_gap_irk_t,
}
#[test]
fn bindgen_test_layout_ble_gap_privacy_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_privacy_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gap_privacy_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_privacy_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_privacy_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_privacy_params_t>())).privacy_mode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_privacy_params_t),
            "::",
            stringify!(privacy_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_privacy_params_t>())).private_addr_type as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_privacy_params_t),
            "::",
            stringify!(private_addr_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_privacy_params_t>())).private_addr_cycle_s as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_privacy_params_t),
            "::",
            stringify!(private_addr_cycle_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_privacy_params_t>())).p_device_irk as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_privacy_params_t),
            "::",
            stringify!(p_device_irk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_phys_t {
    pub tx_phys: u8,
    pub rx_phys: u8,
}
#[test]
fn bindgen_test_layout_ble_gap_phys_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_phys_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_gap_phys_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_phys_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_phys_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_phys_t>())).tx_phys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_phys_t),
            "::",
            stringify!(tx_phys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_phys_t>())).rx_phys as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_phys_t),
            "::",
            stringify!(rx_phys)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_sec_kdist_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_sec_kdist_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_sec_kdist_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gap_sec_kdist_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_sec_kdist_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_sec_kdist_t))
    );
}
impl ble_gap_sec_kdist_t {
    #[inline]
    pub fn enc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_enc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn id(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_id(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sign(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sign(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn link(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_link(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enc: u8,
        id: u8,
        sign: u8,
        link: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enc: u8 = unsafe { ::std::mem::transmute(enc) };
            enc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let id: u8 = unsafe { ::std::mem::transmute(id) };
            id as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sign: u8 = unsafe { ::std::mem::transmute(sign) };
            sign as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let link: u8 = unsafe { ::std::mem::transmute(link) };
            link as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_sec_params_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub min_key_size: u8,
    pub max_key_size: u8,
    pub kdist_own: ble_gap_sec_kdist_t,
    pub kdist_peer: ble_gap_sec_kdist_t,
}
#[test]
fn bindgen_test_layout_ble_gap_sec_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_sec_params_t>(),
        5usize,
        concat!("Size of: ", stringify!(ble_gap_sec_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_sec_params_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_sec_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_sec_params_t>())).min_key_size as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sec_params_t),
            "::",
            stringify!(min_key_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_sec_params_t>())).max_key_size as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sec_params_t),
            "::",
            stringify!(max_key_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_sec_params_t>())).kdist_own as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sec_params_t),
            "::",
            stringify!(kdist_own)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_sec_params_t>())).kdist_peer as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sec_params_t),
            "::",
            stringify!(kdist_peer)
        )
    );
}
impl ble_gap_sec_params_t {
    #[inline]
    pub fn bond(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bond(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mitm(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mitm(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lesc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lesc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keypress(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_keypress(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn io_caps(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_io_caps(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn oob(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_oob(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bond: u8,
        mitm: u8,
        lesc: u8,
        keypress: u8,
        io_caps: u8,
        oob: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bond: u8 = unsafe { ::std::mem::transmute(bond) };
            bond as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mitm: u8 = unsafe { ::std::mem::transmute(mitm) };
            mitm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let lesc: u8 = unsafe { ::std::mem::transmute(lesc) };
            lesc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let keypress: u8 = unsafe { ::std::mem::transmute(keypress) };
            keypress as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let io_caps: u8 = unsafe { ::std::mem::transmute(io_caps) };
            io_caps as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let oob: u8 = unsafe { ::std::mem::transmute(oob) };
            oob as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_enc_info_t {
    pub ltk: [u8; 16usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_enc_info_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_enc_info_t>(),
        17usize,
        concat!("Size of: ", stringify!(ble_gap_enc_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_enc_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_enc_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_enc_info_t>())).ltk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_enc_info_t),
            "::",
            stringify!(ltk)
        )
    );
}
impl ble_gap_enc_info_t {
    #[inline]
    pub fn lesc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lesc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ltk_len(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_ltk_len(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(lesc: u8, auth: u8, ltk_len: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lesc: u8 = unsafe { ::std::mem::transmute(lesc) };
            lesc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let auth: u8 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let ltk_len: u8 = unsafe { ::std::mem::transmute(ltk_len) };
            ltk_len as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_master_id_t {
    pub ediv: u16,
    pub rand: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_ble_gap_master_id_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_master_id_t>(),
        10usize,
        concat!("Size of: ", stringify!(ble_gap_master_id_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_master_id_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_master_id_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_master_id_t>())).ediv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_master_id_t),
            "::",
            stringify!(ediv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_master_id_t>())).rand as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_master_id_t),
            "::",
            stringify!(rand)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_sign_info_t {
    pub csrk: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_ble_gap_sign_info_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_sign_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gap_sign_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_sign_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_sign_info_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_sign_info_t>())).csrk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sign_info_t),
            "::",
            stringify!(csrk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_lesc_p256_pk_t {
    pub pk: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_ble_gap_lesc_p256_pk_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_lesc_p256_pk_t>(),
        64usize,
        concat!("Size of: ", stringify!(ble_gap_lesc_p256_pk_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_lesc_p256_pk_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_lesc_p256_pk_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_lesc_p256_pk_t>())).pk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_lesc_p256_pk_t),
            "::",
            stringify!(pk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_lesc_dhkey_t {
    pub key: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_ble_gap_lesc_dhkey_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_lesc_dhkey_t>(),
        32usize,
        concat!("Size of: ", stringify!(ble_gap_lesc_dhkey_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_lesc_dhkey_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_lesc_dhkey_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_lesc_dhkey_t>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_lesc_dhkey_t),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_lesc_oob_data_t {
    pub addr: ble_gap_addr_t,
    pub r: [u8; 16usize],
    pub c: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_ble_gap_lesc_oob_data_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_lesc_oob_data_t>(),
        39usize,
        concat!("Size of: ", stringify!(ble_gap_lesc_oob_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_lesc_oob_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_lesc_oob_data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_lesc_oob_data_t>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_lesc_oob_data_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_lesc_oob_data_t>())).r as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_lesc_oob_data_t),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_lesc_oob_data_t>())).c as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_lesc_oob_data_t),
            "::",
            stringify!(c)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_connected_t {
    pub peer_addr: ble_gap_addr_t,
    pub role: u8,
    pub conn_params: ble_gap_conn_params_t,
    pub adv_handle: u8,
    pub adv_data: ble_gap_adv_data_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_connected_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_connected_t>(),
        56usize,
        concat!("Size of: ", stringify!(ble_gap_evt_connected_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_connected_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_connected_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_connected_t>())).peer_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_connected_t),
            "::",
            stringify!(peer_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_connected_t>())).role as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_connected_t),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_connected_t>())).conn_params as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_connected_t),
            "::",
            stringify!(conn_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_connected_t>())).adv_handle as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_connected_t),
            "::",
            stringify!(adv_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_connected_t>())).adv_data as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_connected_t),
            "::",
            stringify!(adv_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_disconnected_t {
    pub reason: u8,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_disconnected_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_disconnected_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gap_evt_disconnected_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_disconnected_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_disconnected_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_disconnected_t>())).reason as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_disconnected_t),
            "::",
            stringify!(reason)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_conn_param_update_t {
    pub conn_params: ble_gap_conn_params_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_conn_param_update_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_conn_param_update_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gap_evt_conn_param_update_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_conn_param_update_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_conn_param_update_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_conn_param_update_t>())).conn_params as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_conn_param_update_t),
            "::",
            stringify!(conn_params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_phy_update_request_t {
    pub peer_preferred_phys: ble_gap_phys_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_phy_update_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_phy_update_request_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_gap_evt_phy_update_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_phy_update_request_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_evt_phy_update_request_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_phy_update_request_t>())).peer_preferred_phys
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_phy_update_request_t),
            "::",
            stringify!(peer_preferred_phys)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_phy_update_t {
    pub status: u8,
    pub tx_phy: u8,
    pub rx_phy: u8,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_phy_update_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_phy_update_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_gap_evt_phy_update_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_phy_update_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_phy_update_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_phy_update_t>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_phy_update_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_phy_update_t>())).tx_phy as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_phy_update_t),
            "::",
            stringify!(tx_phy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_phy_update_t>())).rx_phy as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_phy_update_t),
            "::",
            stringify!(rx_phy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_sec_params_request_t {
    pub peer_params: ble_gap_sec_params_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_sec_params_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_sec_params_request_t>(),
        5usize,
        concat!("Size of: ", stringify!(ble_gap_evt_sec_params_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_sec_params_request_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_evt_sec_params_request_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_sec_params_request_t>())).peer_params as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_sec_params_request_t),
            "::",
            stringify!(peer_params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_sec_info_request_t {
    pub peer_addr: ble_gap_addr_t,
    pub master_id: ble_gap_master_id_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_sec_info_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_sec_info_request_t>(),
        20usize,
        concat!("Size of: ", stringify!(ble_gap_evt_sec_info_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_sec_info_request_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_sec_info_request_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_sec_info_request_t>())).peer_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_sec_info_request_t),
            "::",
            stringify!(peer_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_sec_info_request_t>())).master_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_sec_info_request_t),
            "::",
            stringify!(master_id)
        )
    );
}
impl ble_gap_evt_sec_info_request_t {
    #[inline]
    pub fn enc_info(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_enc_info(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn id_info(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_id_info(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sign_info(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sign_info(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enc_info: u8,
        id_info: u8,
        sign_info: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enc_info: u8 = unsafe { ::std::mem::transmute(enc_info) };
            enc_info as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let id_info: u8 = unsafe { ::std::mem::transmute(id_info) };
            id_info as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sign_info: u8 = unsafe { ::std::mem::transmute(sign_info) };
            sign_info as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_passkey_display_t {
    pub passkey: [u8; 6usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_passkey_display_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_passkey_display_t>(),
        7usize,
        concat!("Size of: ", stringify!(ble_gap_evt_passkey_display_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_passkey_display_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_passkey_display_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_passkey_display_t>())).passkey as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_passkey_display_t),
            "::",
            stringify!(passkey)
        )
    );
}
impl ble_gap_evt_passkey_display_t {
    #[inline]
    pub fn match_request(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_match_request(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(match_request: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let match_request: u8 = unsafe { ::std::mem::transmute(match_request) };
            match_request as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_key_pressed_t {
    pub kp_not: u8,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_key_pressed_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_key_pressed_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gap_evt_key_pressed_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_key_pressed_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_key_pressed_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_key_pressed_t>())).kp_not as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_key_pressed_t),
            "::",
            stringify!(kp_not)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_auth_key_request_t {
    pub key_type: u8,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_auth_key_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_auth_key_request_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gap_evt_auth_key_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_auth_key_request_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_auth_key_request_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_auth_key_request_t>())).key_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_auth_key_request_t),
            "::",
            stringify!(key_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_lesc_dhkey_request_t {
    pub p_pk_peer: *mut ble_gap_lesc_p256_pk_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_ble_gap_evt_lesc_dhkey_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_lesc_dhkey_request_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gap_evt_lesc_dhkey_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_lesc_dhkey_request_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_evt_lesc_dhkey_request_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_lesc_dhkey_request_t>())).p_pk_peer as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_lesc_dhkey_request_t),
            "::",
            stringify!(p_pk_peer)
        )
    );
}
impl ble_gap_evt_lesc_dhkey_request_t {
    #[inline]
    pub fn oobd_req(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_oobd_req(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(oobd_req: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let oobd_req: u8 = unsafe { ::std::mem::transmute(oobd_req) };
            oobd_req as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_sec_levels_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_sec_levels_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_sec_levels_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gap_sec_levels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_sec_levels_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_sec_levels_t))
    );
}
impl ble_gap_sec_levels_t {
    #[inline]
    pub fn lv1(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lv1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lv2(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lv2(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lv3(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lv3(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lv4(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lv4(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lv1: u8,
        lv2: u8,
        lv3: u8,
        lv4: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lv1: u8 = unsafe { ::std::mem::transmute(lv1) };
            lv1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lv2: u8 = unsafe { ::std::mem::transmute(lv2) };
            lv2 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let lv3: u8 = unsafe { ::std::mem::transmute(lv3) };
            lv3 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let lv4: u8 = unsafe { ::std::mem::transmute(lv4) };
            lv4 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_enc_key_t {
    pub enc_info: ble_gap_enc_info_t,
    pub master_id: ble_gap_master_id_t,
}
#[test]
fn bindgen_test_layout_ble_gap_enc_key_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_enc_key_t>(),
        28usize,
        concat!("Size of: ", stringify!(ble_gap_enc_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_enc_key_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_enc_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_enc_key_t>())).enc_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_enc_key_t),
            "::",
            stringify!(enc_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_enc_key_t>())).master_id as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_enc_key_t),
            "::",
            stringify!(master_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_id_key_t {
    pub id_info: ble_gap_irk_t,
    pub id_addr_info: ble_gap_addr_t,
}
#[test]
fn bindgen_test_layout_ble_gap_id_key_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_id_key_t>(),
        23usize,
        concat!("Size of: ", stringify!(ble_gap_id_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_id_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_id_key_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_id_key_t>())).id_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_id_key_t),
            "::",
            stringify!(id_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_id_key_t>())).id_addr_info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_id_key_t),
            "::",
            stringify!(id_addr_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_sec_keys_t {
    pub p_enc_key: *mut ble_gap_enc_key_t,
    pub p_id_key: *mut ble_gap_id_key_t,
    pub p_sign_key: *mut ble_gap_sign_info_t,
    pub p_pk: *mut ble_gap_lesc_p256_pk_t,
}
#[test]
fn bindgen_test_layout_ble_gap_sec_keys_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_sec_keys_t>(),
        32usize,
        concat!("Size of: ", stringify!(ble_gap_sec_keys_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_sec_keys_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_sec_keys_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_sec_keys_t>())).p_enc_key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sec_keys_t),
            "::",
            stringify!(p_enc_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_sec_keys_t>())).p_id_key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sec_keys_t),
            "::",
            stringify!(p_id_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_sec_keys_t>())).p_sign_key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sec_keys_t),
            "::",
            stringify!(p_sign_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_sec_keys_t>())).p_pk as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sec_keys_t),
            "::",
            stringify!(p_pk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_sec_keyset_t {
    pub keys_own: ble_gap_sec_keys_t,
    pub keys_peer: ble_gap_sec_keys_t,
}
#[test]
fn bindgen_test_layout_ble_gap_sec_keyset_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_sec_keyset_t>(),
        64usize,
        concat!("Size of: ", stringify!(ble_gap_sec_keyset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_sec_keyset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_sec_keyset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_sec_keyset_t>())).keys_own as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sec_keyset_t),
            "::",
            stringify!(keys_own)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_sec_keyset_t>())).keys_peer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_sec_keyset_t),
            "::",
            stringify!(keys_peer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_data_length_params_t {
    pub max_tx_octets: u16,
    pub max_rx_octets: u16,
    pub max_tx_time_us: u16,
    pub max_rx_time_us: u16,
}
#[test]
fn bindgen_test_layout_ble_gap_data_length_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_data_length_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gap_data_length_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_data_length_params_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_data_length_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_data_length_params_t>())).max_tx_octets as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_data_length_params_t),
            "::",
            stringify!(max_tx_octets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_data_length_params_t>())).max_rx_octets as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_data_length_params_t),
            "::",
            stringify!(max_rx_octets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_data_length_params_t>())).max_tx_time_us as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_data_length_params_t),
            "::",
            stringify!(max_tx_time_us)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_data_length_params_t>())).max_rx_time_us as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_data_length_params_t),
            "::",
            stringify!(max_rx_time_us)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_data_length_limitation_t {
    pub tx_payload_limited_octets: u16,
    pub rx_payload_limited_octets: u16,
    pub tx_rx_time_limited_us: u16,
}
#[test]
fn bindgen_test_layout_ble_gap_data_length_limitation_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_data_length_limitation_t>(),
        6usize,
        concat!("Size of: ", stringify!(ble_gap_data_length_limitation_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_data_length_limitation_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_data_length_limitation_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_data_length_limitation_t>())).tx_payload_limited_octets
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_data_length_limitation_t),
            "::",
            stringify!(tx_payload_limited_octets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_data_length_limitation_t>())).rx_payload_limited_octets
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_data_length_limitation_t),
            "::",
            stringify!(rx_payload_limited_octets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_data_length_limitation_t>())).tx_rx_time_limited_us
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_data_length_limitation_t),
            "::",
            stringify!(tx_rx_time_limited_us)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_auth_status_t {
    pub auth_status: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub sm1_levels: ble_gap_sec_levels_t,
    pub sm2_levels: ble_gap_sec_levels_t,
    pub kdist_own: ble_gap_sec_kdist_t,
    pub kdist_peer: ble_gap_sec_kdist_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_auth_status_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_auth_status_t>(),
        6usize,
        concat!("Size of: ", stringify!(ble_gap_evt_auth_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_auth_status_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_auth_status_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_auth_status_t>())).auth_status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_auth_status_t),
            "::",
            stringify!(auth_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_auth_status_t>())).sm1_levels as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_auth_status_t),
            "::",
            stringify!(sm1_levels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_auth_status_t>())).sm2_levels as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_auth_status_t),
            "::",
            stringify!(sm2_levels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_auth_status_t>())).kdist_own as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_auth_status_t),
            "::",
            stringify!(kdist_own)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_auth_status_t>())).kdist_peer as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_auth_status_t),
            "::",
            stringify!(kdist_peer)
        )
    );
}
impl ble_gap_evt_auth_status_t {
    #[inline]
    pub fn error_src(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_error_src(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn bonded(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bonded(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lesc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lesc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        error_src: u8,
        bonded: u8,
        lesc: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let error_src: u8 = unsafe { ::std::mem::transmute(error_src) };
            error_src as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bonded: u8 = unsafe { ::std::mem::transmute(bonded) };
            bonded as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let lesc: u8 = unsafe { ::std::mem::transmute(lesc) };
            lesc as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_conn_sec_update_t {
    pub conn_sec: ble_gap_conn_sec_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_conn_sec_update_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_conn_sec_update_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_gap_evt_conn_sec_update_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_conn_sec_update_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_conn_sec_update_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_conn_sec_update_t>())).conn_sec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_conn_sec_update_t),
            "::",
            stringify!(conn_sec)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_gap_evt_timeout_t {
    pub src: u8,
    pub params: ble_gap_evt_timeout_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_gap_evt_timeout_t__bindgen_ty_1 {
    pub adv_report_buffer: ble_data_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_timeout_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_timeout_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gap_evt_timeout_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_timeout_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_evt_timeout_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_timeout_t__bindgen_ty_1>())).adv_report_buffer
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_timeout_t__bindgen_ty_1),
            "::",
            stringify!(adv_report_buffer)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_gap_evt_timeout_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_timeout_t>(),
        24usize,
        concat!("Size of: ", stringify!(ble_gap_evt_timeout_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_timeout_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_timeout_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_timeout_t>())).src as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_timeout_t),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_timeout_t>())).params as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_timeout_t),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_rssi_changed_t {
    pub rssi: i8,
    pub ch_index: u8,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_rssi_changed_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_rssi_changed_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_gap_evt_rssi_changed_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_rssi_changed_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_rssi_changed_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_rssi_changed_t>())).rssi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_rssi_changed_t),
            "::",
            stringify!(rssi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_rssi_changed_t>())).ch_index as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_rssi_changed_t),
            "::",
            stringify!(ch_index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_adv_set_terminated_t {
    pub reason: u8,
    pub adv_handle: u8,
    pub num_completed_adv_events: u8,
    pub adv_data: ble_gap_adv_data_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_adv_set_terminated_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_adv_set_terminated_t>(),
        40usize,
        concat!("Size of: ", stringify!(ble_gap_evt_adv_set_terminated_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_adv_set_terminated_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_evt_adv_set_terminated_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_set_terminated_t>())).reason as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_set_terminated_t),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_set_terminated_t>())).adv_handle as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_set_terminated_t),
            "::",
            stringify!(adv_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_set_terminated_t>())).num_completed_adv_events
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_set_terminated_t),
            "::",
            stringify!(num_completed_adv_events)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_set_terminated_t>())).adv_data as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_set_terminated_t),
            "::",
            stringify!(adv_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_adv_report_t {
    pub type_: ble_gap_adv_report_type_t,
    pub peer_addr: ble_gap_addr_t,
    pub direct_addr: ble_gap_addr_t,
    pub primary_phy: u8,
    pub secondary_phy: u8,
    pub tx_power: i8,
    pub rssi: i8,
    pub ch_index: u8,
    pub set_id: u8,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub data: ble_data_t,
    pub aux_pointer: ble_gap_aux_pointer_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_adv_report_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_adv_report_t>(),
        48usize,
        concat!("Size of: ", stringify!(ble_gap_evt_adv_report_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_adv_report_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_adv_report_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).peer_addr as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(peer_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).direct_addr as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(direct_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).primary_phy as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(primary_phy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).secondary_phy as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(secondary_phy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).tx_power as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(tx_power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).rssi as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(rssi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).ch_index as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(ch_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).set_id as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(set_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_adv_report_t>())).aux_pointer as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_adv_report_t),
            "::",
            stringify!(aux_pointer)
        )
    );
}
impl ble_gap_evt_adv_report_t {
    #[inline]
    pub fn data_id(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u16) }
    }
    #[inline]
    pub fn set_data_id(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(data_id: u16) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let data_id: u16 = unsafe { ::std::mem::transmute(data_id) };
            data_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_sec_request_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_sec_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_sec_request_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gap_evt_sec_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_sec_request_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_sec_request_t))
    );
}
impl ble_gap_evt_sec_request_t {
    #[inline]
    pub fn bond(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bond(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mitm(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mitm(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lesc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lesc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keypress(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_keypress(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bond: u8,
        mitm: u8,
        lesc: u8,
        keypress: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bond: u8 = unsafe { ::std::mem::transmute(bond) };
            bond as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mitm: u8 = unsafe { ::std::mem::transmute(mitm) };
            mitm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let lesc: u8 = unsafe { ::std::mem::transmute(lesc) };
            lesc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let keypress: u8 = unsafe { ::std::mem::transmute(keypress) };
            keypress as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_conn_param_update_request_t {
    pub conn_params: ble_gap_conn_params_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_conn_param_update_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_conn_param_update_request_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ble_gap_evt_conn_param_update_request_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_conn_param_update_request_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_evt_conn_param_update_request_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_conn_param_update_request_t>())).conn_params
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_conn_param_update_request_t),
            "::",
            stringify!(conn_params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_scan_req_report_t {
    pub adv_handle: u8,
    pub rssi: i8,
    pub peer_addr: ble_gap_addr_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_scan_req_report_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_scan_req_report_t>(),
        9usize,
        concat!("Size of: ", stringify!(ble_gap_evt_scan_req_report_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_scan_req_report_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_scan_req_report_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_scan_req_report_t>())).adv_handle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_scan_req_report_t),
            "::",
            stringify!(adv_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_scan_req_report_t>())).rssi as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_scan_req_report_t),
            "::",
            stringify!(rssi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_scan_req_report_t>())).peer_addr as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_scan_req_report_t),
            "::",
            stringify!(peer_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_data_length_update_request_t {
    pub peer_params: ble_gap_data_length_params_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_data_length_update_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_data_length_update_request_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ble_gap_evt_data_length_update_request_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_data_length_update_request_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_evt_data_length_update_request_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_data_length_update_request_t>())).peer_params
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_data_length_update_request_t),
            "::",
            stringify!(peer_params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_data_length_update_t {
    pub effective_params: ble_gap_data_length_params_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_data_length_update_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_data_length_update_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gap_evt_data_length_update_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_data_length_update_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_evt_data_length_update_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_data_length_update_t>())).effective_params
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_data_length_update_t),
            "::",
            stringify!(effective_params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_evt_qos_channel_survey_report_t {
    pub channel_energy: [i8; 40usize],
}
#[test]
fn bindgen_test_layout_ble_gap_evt_qos_channel_survey_report_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_qos_channel_survey_report_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(ble_gap_evt_qos_channel_survey_report_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_qos_channel_survey_report_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_evt_qos_channel_survey_report_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_qos_channel_survey_report_t>())).channel_energy
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_qos_channel_survey_report_t),
            "::",
            stringify!(channel_energy)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_gap_evt_t {
    pub conn_handle: u16,
    pub params: ble_gap_evt_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_gap_evt_t__bindgen_ty_1 {
    pub connected: ble_gap_evt_connected_t,
    pub disconnected: ble_gap_evt_disconnected_t,
    pub conn_param_update: ble_gap_evt_conn_param_update_t,
    pub sec_params_request: ble_gap_evt_sec_params_request_t,
    pub sec_info_request: ble_gap_evt_sec_info_request_t,
    pub passkey_display: ble_gap_evt_passkey_display_t,
    pub key_pressed: ble_gap_evt_key_pressed_t,
    pub auth_key_request: ble_gap_evt_auth_key_request_t,
    pub lesc_dhkey_request: ble_gap_evt_lesc_dhkey_request_t,
    pub auth_status: ble_gap_evt_auth_status_t,
    pub conn_sec_update: ble_gap_evt_conn_sec_update_t,
    pub timeout: ble_gap_evt_timeout_t,
    pub rssi_changed: ble_gap_evt_rssi_changed_t,
    pub adv_report: ble_gap_evt_adv_report_t,
    pub adv_set_terminated: ble_gap_evt_adv_set_terminated_t,
    pub sec_request: ble_gap_evt_sec_request_t,
    pub conn_param_update_request: ble_gap_evt_conn_param_update_request_t,
    pub scan_req_report: ble_gap_evt_scan_req_report_t,
    pub phy_update_request: ble_gap_evt_phy_update_request_t,
    pub phy_update: ble_gap_evt_phy_update_t,
    pub data_length_update_request: ble_gap_evt_data_length_update_request_t,
    pub data_length_update: ble_gap_evt_data_length_update_t,
    pub qos_channel_survey_report: ble_gap_evt_qos_channel_survey_report_t,
}
#[test]
fn bindgen_test_layout_ble_gap_evt_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(ble_gap_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).connected as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(connected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).disconnected as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(disconnected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).conn_param_update as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(conn_param_update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).sec_params_request as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(sec_params_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).sec_info_request as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(sec_info_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).passkey_display as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(passkey_display)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).key_pressed as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(key_pressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).auth_key_request as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(auth_key_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).lesc_dhkey_request as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(lesc_dhkey_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).auth_status as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(auth_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).conn_sec_update as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(conn_sec_update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).timeout as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).rssi_changed as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(rssi_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).adv_report as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(adv_report)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).adv_set_terminated as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(adv_set_terminated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).sec_request as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(sec_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).conn_param_update_request
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(conn_param_update_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).scan_req_report as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(scan_req_report)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).phy_update_request as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(phy_update_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).phy_update as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(phy_update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).data_length_update_request
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(data_length_update_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).data_length_update as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(data_length_update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_evt_t__bindgen_ty_1>())).qos_channel_survey_report
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t__bindgen_ty_1),
            "::",
            stringify!(qos_channel_survey_report)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_gap_evt_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_evt_t>(),
        64usize,
        concat!("Size of: ", stringify!(ble_gap_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_evt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_evt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_t>())).conn_handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t),
            "::",
            stringify!(conn_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_evt_t>())).params as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_evt_t),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_conn_cfg_t {
    pub conn_count: u8,
    pub event_length: u16,
}
#[test]
fn bindgen_test_layout_ble_gap_conn_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_conn_cfg_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_gap_conn_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_conn_cfg_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_conn_cfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_conn_cfg_t>())).conn_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_conn_cfg_t),
            "::",
            stringify!(conn_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_conn_cfg_t>())).event_length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_conn_cfg_t),
            "::",
            stringify!(event_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_cfg_role_count_t {
    pub adv_set_count: u8,
    pub periph_role_count: u8,
    pub central_role_count: u8,
    pub central_sec_count: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_cfg_role_count_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_cfg_role_count_t>(),
        5usize,
        concat!("Size of: ", stringify!(ble_gap_cfg_role_count_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_cfg_role_count_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_cfg_role_count_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_cfg_role_count_t>())).adv_set_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_cfg_role_count_t),
            "::",
            stringify!(adv_set_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_cfg_role_count_t>())).periph_role_count as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_cfg_role_count_t),
            "::",
            stringify!(periph_role_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_cfg_role_count_t>())).central_role_count as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_cfg_role_count_t),
            "::",
            stringify!(central_role_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_cfg_role_count_t>())).central_sec_count as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_cfg_role_count_t),
            "::",
            stringify!(central_sec_count)
        )
    );
}
impl ble_gap_cfg_role_count_t {
    #[inline]
    pub fn qos_channel_survey_role_available(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_qos_channel_survey_role_available(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        qos_channel_survey_role_available: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let qos_channel_survey_role_available: u8 =
                unsafe { ::std::mem::transmute(qos_channel_survey_role_available) };
            qos_channel_survey_role_available as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_cfg_device_name_t {
    pub write_perm: ble_gap_conn_sec_mode_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub p_value: *mut u8,
    pub current_len: u16,
    pub max_len: u16,
}
#[test]
fn bindgen_test_layout_ble_gap_cfg_device_name_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_cfg_device_name_t>(),
        24usize,
        concat!("Size of: ", stringify!(ble_gap_cfg_device_name_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_cfg_device_name_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_cfg_device_name_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_cfg_device_name_t>())).write_perm as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_cfg_device_name_t),
            "::",
            stringify!(write_perm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_cfg_device_name_t>())).p_value as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_cfg_device_name_t),
            "::",
            stringify!(p_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_cfg_device_name_t>())).current_len as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_cfg_device_name_t),
            "::",
            stringify!(current_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_cfg_device_name_t>())).max_len as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_cfg_device_name_t),
            "::",
            stringify!(max_len)
        )
    );
}
impl ble_gap_cfg_device_name_t {
    #[inline]
    pub fn vloc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_vloc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(vloc: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let vloc: u8 = unsafe { ::std::mem::transmute(vloc) };
            vloc as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_gap_cfg_t {
    pub role_count_cfg: ble_gap_cfg_role_count_t,
    pub device_name_cfg: ble_gap_cfg_device_name_t,
}
#[test]
fn bindgen_test_layout_ble_gap_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_cfg_t>(),
        24usize,
        concat!("Size of: ", stringify!(ble_gap_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_cfg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_cfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_cfg_t>())).role_count_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_cfg_t),
            "::",
            stringify!(role_count_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_cfg_t>())).device_name_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_cfg_t),
            "::",
            stringify!(device_name_cfg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_opt_ch_map_t {
    pub conn_handle: u16,
    pub ch_map: [u8; 5usize],
}
#[test]
fn bindgen_test_layout_ble_gap_opt_ch_map_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_opt_ch_map_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gap_opt_ch_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_opt_ch_map_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gap_opt_ch_map_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_opt_ch_map_t>())).conn_handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_ch_map_t),
            "::",
            stringify!(conn_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_opt_ch_map_t>())).ch_map as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_ch_map_t),
            "::",
            stringify!(ch_map)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_opt_local_conn_latency_t {
    pub conn_handle: u16,
    pub requested_latency: u16,
    pub p_actual_latency: *mut u16,
}
#[test]
fn bindgen_test_layout_ble_gap_opt_local_conn_latency_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_opt_local_conn_latency_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gap_opt_local_conn_latency_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_opt_local_conn_latency_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_opt_local_conn_latency_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_opt_local_conn_latency_t>())).conn_handle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_local_conn_latency_t),
            "::",
            stringify!(conn_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_opt_local_conn_latency_t>())).requested_latency
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_local_conn_latency_t),
            "::",
            stringify!(requested_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_opt_local_conn_latency_t>())).p_actual_latency
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_local_conn_latency_t),
            "::",
            stringify!(p_actual_latency)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_opt_slave_latency_disable_t {
    pub conn_handle: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_ble_gap_opt_slave_latency_disable_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_opt_slave_latency_disable_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_gap_opt_slave_latency_disable_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_opt_slave_latency_disable_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_opt_slave_latency_disable_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_opt_slave_latency_disable_t>())).conn_handle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_slave_latency_disable_t),
            "::",
            stringify!(conn_handle)
        )
    );
}
impl ble_gap_opt_slave_latency_disable_t {
    #[inline]
    pub fn disable(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_disable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(disable: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let disable: u8 = unsafe { ::std::mem::transmute(disable) };
            disable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_opt_passkey_t {
    pub p_passkey: *const u8,
}
#[test]
fn bindgen_test_layout_ble_gap_opt_passkey_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_opt_passkey_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gap_opt_passkey_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_opt_passkey_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_opt_passkey_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_opt_passkey_t>())).p_passkey as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_passkey_t),
            "::",
            stringify!(p_passkey)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_opt_compat_mode_1_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gap_opt_compat_mode_1_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_opt_compat_mode_1_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gap_opt_compat_mode_1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_opt_compat_mode_1_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gap_opt_compat_mode_1_t))
    );
}
impl ble_gap_opt_compat_mode_1_t {
    #[inline]
    pub fn enable(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_enable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(enable: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enable: u8 = unsafe { ::std::mem::transmute(enable) };
            enable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gap_opt_auth_payload_timeout_t {
    pub conn_handle: u16,
    pub auth_payload_timeout: u16,
}
#[test]
fn bindgen_test_layout_ble_gap_opt_auth_payload_timeout_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_opt_auth_payload_timeout_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_gap_opt_auth_payload_timeout_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_opt_auth_payload_timeout_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gap_opt_auth_payload_timeout_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_opt_auth_payload_timeout_t>())).conn_handle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_auth_payload_timeout_t),
            "::",
            stringify!(conn_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_opt_auth_payload_timeout_t>())).auth_payload_timeout
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_auth_payload_timeout_t),
            "::",
            stringify!(auth_payload_timeout)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_gap_opt_t {
    pub ch_map: ble_gap_opt_ch_map_t,
    pub local_conn_latency: ble_gap_opt_local_conn_latency_t,
    pub passkey: ble_gap_opt_passkey_t,
    pub compat_mode_1: ble_gap_opt_compat_mode_1_t,
    pub auth_payload_timeout: ble_gap_opt_auth_payload_timeout_t,
    pub slave_latency_disable: ble_gap_opt_slave_latency_disable_t,
}
#[test]
fn bindgen_test_layout_ble_gap_opt_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gap_opt_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gap_opt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gap_opt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gap_opt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_opt_t>())).ch_map as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_t),
            "::",
            stringify!(ch_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_opt_t>())).local_conn_latency as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_t),
            "::",
            stringify!(local_conn_latency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_opt_t>())).passkey as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_t),
            "::",
            stringify!(passkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gap_opt_t>())).compat_mode_1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_t),
            "::",
            stringify!(compat_mode_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_opt_t>())).auth_payload_timeout as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_t),
            "::",
            stringify!(auth_payload_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gap_opt_t>())).slave_latency_disable as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gap_opt_t),
            "::",
            stringify!(slave_latency_disable)
        )
    );
}
extern "C" {
    pub fn sd_ble_gap_addr_set(adapter: *mut adapter_t, p_addr: *const ble_gap_addr_t) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_addr_get(adapter: *mut adapter_t, p_addr: *mut ble_gap_addr_t) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_adv_addr_get(
        adapter: *mut adapter_t,
        adv_handle: u8,
        p_addr: *mut ble_gap_addr_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_whitelist_set(
        adapter: *mut adapter_t,
        pp_wl_addrs: *const *const ble_gap_addr_t,
        len: u8,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_device_identities_set(
        adapter: *mut adapter_t,
        pp_id_keys: *const *const ble_gap_id_key_t,
        pp_local_irks: *const *const ble_gap_irk_t,
        len: u8,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_privacy_set(
        adapter: *mut adapter_t,
        p_privacy_params: *const ble_gap_privacy_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_privacy_get(
        adapter: *mut adapter_t,
        p_privacy_params: *mut ble_gap_privacy_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_adv_set_configure(
        adapter: *mut adapter_t,
        p_adv_handle: *mut u8,
        p_adv_data: *const ble_gap_adv_data_t,
        p_adv_params: *const ble_gap_adv_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_adv_start(adapter: *mut adapter_t, adv_handle: u8, conn_cfg_tag: u8) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_adv_stop(adapter: *mut adapter_t, adv_handle: u8) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_conn_param_update(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_conn_params: *const ble_gap_conn_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_disconnect(
        adapter: *mut adapter_t,
        conn_handle: u16,
        hci_status_code: u8,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_tx_power_set(
        adapter: *mut adapter_t,
        role: u8,
        handle: u16,
        tx_power: i8,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_appearance_set(adapter: *mut adapter_t, appearance: u16) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_appearance_get(adapter: *mut adapter_t, p_appearance: *mut u16) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_ppcp_set(
        adapter: *mut adapter_t,
        p_conn_params: *const ble_gap_conn_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_ppcp_get(
        adapter: *mut adapter_t,
        p_conn_params: *mut ble_gap_conn_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_device_name_set(
        adapter: *mut adapter_t,
        p_write_perm: *const ble_gap_conn_sec_mode_t,
        p_dev_name: *const u8,
        len: u16,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_device_name_get(
        adapter: *mut adapter_t,
        p_dev_name: *mut u8,
        p_len: *mut u16,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_authenticate(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_sec_params: *const ble_gap_sec_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_sec_params_reply(
        adapter: *mut adapter_t,
        conn_handle: u16,
        sec_status: u8,
        p_sec_params: *const ble_gap_sec_params_t,
        p_sec_keyset: *const ble_gap_sec_keyset_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_auth_key_reply(
        adapter: *mut adapter_t,
        conn_handle: u16,
        key_type: u8,
        p_key: *const u8,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_lesc_dhkey_reply(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_dhkey: *const ble_gap_lesc_dhkey_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_keypress_notify(adapter: *mut adapter_t, conn_handle: u16, kp_not: u8)
        -> u32;
}
extern "C" {
    pub fn sd_ble_gap_lesc_oob_data_get(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_pk_own: *const ble_gap_lesc_p256_pk_t,
        p_oobd_own: *mut ble_gap_lesc_oob_data_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_lesc_oob_data_set(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_oobd_own: *const ble_gap_lesc_oob_data_t,
        p_oobd_peer: *const ble_gap_lesc_oob_data_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_encrypt(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_master_id: *const ble_gap_master_id_t,
        p_enc_info: *const ble_gap_enc_info_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_sec_info_reply(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_enc_info: *const ble_gap_enc_info_t,
        p_id_info: *const ble_gap_irk_t,
        p_sign_info: *const ble_gap_sign_info_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_conn_sec_get(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_conn_sec: *mut ble_gap_conn_sec_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_rssi_start(
        adapter: *mut adapter_t,
        conn_handle: u16,
        threshold_dbm: u8,
        skip_count: u8,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_rssi_stop(adapter: *mut adapter_t, conn_handle: u16) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_rssi_get(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_rssi: *mut i8,
        p_ch_index: *mut u8,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_scan_start(
        adapter: *mut adapter_t,
        p_scan_params: *const ble_gap_scan_params_t,
        p_adv_report_buffer: *const ble_data_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_scan_stop(adapter: *mut adapter_t) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_connect(
        adapter: *mut adapter_t,
        p_peer_addr: *const ble_gap_addr_t,
        p_scan_params: *const ble_gap_scan_params_t,
        p_conn_params: *const ble_gap_conn_params_t,
        conn_cfg_tag: u8,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_connect_cancel(adapter: *mut adapter_t) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_phy_update(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_gap_phys: *const ble_gap_phys_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_data_length_update(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_dl_params: *const ble_gap_data_length_params_t,
        p_dl_limitation: *mut ble_gap_data_length_limitation_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_qos_channel_survey_start(adapter: *mut adapter_t, interval_us: u32) -> u32;
}
extern "C" {
    pub fn sd_ble_gap_qos_channel_survey_stop(adapter: *mut adapter_t) -> u32;
}
pub const BLE_L2CAP_SVCS_SD_BLE_L2CAP_CH_SETUP: BLE_L2CAP_SVCS = 184;
pub const BLE_L2CAP_SVCS_SD_BLE_L2CAP_CH_RELEASE: BLE_L2CAP_SVCS = 185;
pub const BLE_L2CAP_SVCS_SD_BLE_L2CAP_CH_RX: BLE_L2CAP_SVCS = 186;
pub const BLE_L2CAP_SVCS_SD_BLE_L2CAP_CH_TX: BLE_L2CAP_SVCS = 187;
pub const BLE_L2CAP_SVCS_SD_BLE_L2CAP_CH_FLOW_CONTROL: BLE_L2CAP_SVCS = 188;
pub type BLE_L2CAP_SVCS = u32;
pub const BLE_L2CAP_EVTS_BLE_L2CAP_EVT_CH_SETUP_REQUEST: BLE_L2CAP_EVTS = 112;
pub const BLE_L2CAP_EVTS_BLE_L2CAP_EVT_CH_SETUP_REFUSED: BLE_L2CAP_EVTS = 113;
pub const BLE_L2CAP_EVTS_BLE_L2CAP_EVT_CH_SETUP: BLE_L2CAP_EVTS = 114;
pub const BLE_L2CAP_EVTS_BLE_L2CAP_EVT_CH_RELEASED: BLE_L2CAP_EVTS = 115;
pub const BLE_L2CAP_EVTS_BLE_L2CAP_EVT_CH_SDU_BUF_RELEASED: BLE_L2CAP_EVTS = 116;
pub const BLE_L2CAP_EVTS_BLE_L2CAP_EVT_CH_CREDIT: BLE_L2CAP_EVTS = 117;
pub const BLE_L2CAP_EVTS_BLE_L2CAP_EVT_CH_RX: BLE_L2CAP_EVTS = 118;
pub const BLE_L2CAP_EVTS_BLE_L2CAP_EVT_CH_TX: BLE_L2CAP_EVTS = 119;
pub type BLE_L2CAP_EVTS = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_conn_cfg_t {
    pub rx_mps: u16,
    pub tx_mps: u16,
    pub rx_queue_size: u8,
    pub tx_queue_size: u8,
    pub ch_count: u8,
}
#[test]
fn bindgen_test_layout_ble_l2cap_conn_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_conn_cfg_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_l2cap_conn_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_conn_cfg_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_l2cap_conn_cfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_conn_cfg_t>())).rx_mps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_conn_cfg_t),
            "::",
            stringify!(rx_mps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_conn_cfg_t>())).tx_mps as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_conn_cfg_t),
            "::",
            stringify!(tx_mps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_conn_cfg_t>())).rx_queue_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_conn_cfg_t),
            "::",
            stringify!(rx_queue_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_conn_cfg_t>())).tx_queue_size as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_conn_cfg_t),
            "::",
            stringify!(tx_queue_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_conn_cfg_t>())).ch_count as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_conn_cfg_t),
            "::",
            stringify!(ch_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_ch_rx_params_t {
    pub rx_mtu: u16,
    pub rx_mps: u16,
    pub sdu_buf: ble_data_t,
}
#[test]
fn bindgen_test_layout_ble_l2cap_ch_rx_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_ch_rx_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(ble_l2cap_ch_rx_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_ch_rx_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_l2cap_ch_rx_params_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_ch_rx_params_t>())).rx_mtu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_ch_rx_params_t),
            "::",
            stringify!(rx_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_ch_rx_params_t>())).rx_mps as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_ch_rx_params_t),
            "::",
            stringify!(rx_mps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_ch_rx_params_t>())).sdu_buf as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_ch_rx_params_t),
            "::",
            stringify!(sdu_buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_ch_setup_params_t {
    pub rx_params: ble_l2cap_ch_rx_params_t,
    pub le_psm: u16,
    pub status: u16,
}
#[test]
fn bindgen_test_layout_ble_l2cap_ch_setup_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_ch_setup_params_t>(),
        32usize,
        concat!("Size of: ", stringify!(ble_l2cap_ch_setup_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_ch_setup_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_l2cap_ch_setup_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_ch_setup_params_t>())).rx_params as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_ch_setup_params_t),
            "::",
            stringify!(rx_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_ch_setup_params_t>())).le_psm as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_ch_setup_params_t),
            "::",
            stringify!(le_psm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_ch_setup_params_t>())).status as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_ch_setup_params_t),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_ch_tx_params_t {
    pub tx_mtu: u16,
    pub peer_mps: u16,
    pub tx_mps: u16,
    pub credits: u16,
}
#[test]
fn bindgen_test_layout_ble_l2cap_ch_tx_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_ch_tx_params_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_l2cap_ch_tx_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_ch_tx_params_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_l2cap_ch_tx_params_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_ch_tx_params_t>())).tx_mtu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_ch_tx_params_t),
            "::",
            stringify!(tx_mtu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_ch_tx_params_t>())).peer_mps as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_ch_tx_params_t),
            "::",
            stringify!(peer_mps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_ch_tx_params_t>())).tx_mps as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_ch_tx_params_t),
            "::",
            stringify!(tx_mps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_ch_tx_params_t>())).credits as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_ch_tx_params_t),
            "::",
            stringify!(credits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_evt_ch_setup_request_t {
    pub tx_params: ble_l2cap_ch_tx_params_t,
    pub le_psm: u16,
}
#[test]
fn bindgen_test_layout_ble_l2cap_evt_ch_setup_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_evt_ch_setup_request_t>(),
        10usize,
        concat!("Size of: ", stringify!(ble_l2cap_evt_ch_setup_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_evt_ch_setup_request_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_l2cap_evt_ch_setup_request_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_ch_setup_request_t>())).tx_params as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_ch_setup_request_t),
            "::",
            stringify!(tx_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_ch_setup_request_t>())).le_psm as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_ch_setup_request_t),
            "::",
            stringify!(le_psm)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_evt_ch_setup_refused_t {
    pub source: u8,
    pub status: u16,
}
#[test]
fn bindgen_test_layout_ble_l2cap_evt_ch_setup_refused_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_evt_ch_setup_refused_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_l2cap_evt_ch_setup_refused_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_evt_ch_setup_refused_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_l2cap_evt_ch_setup_refused_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_ch_setup_refused_t>())).source as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_ch_setup_refused_t),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_ch_setup_refused_t>())).status as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_ch_setup_refused_t),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_evt_ch_setup_t {
    pub tx_params: ble_l2cap_ch_tx_params_t,
}
#[test]
fn bindgen_test_layout_ble_l2cap_evt_ch_setup_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_evt_ch_setup_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_l2cap_evt_ch_setup_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_evt_ch_setup_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_l2cap_evt_ch_setup_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_ch_setup_t>())).tx_params as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_ch_setup_t),
            "::",
            stringify!(tx_params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_evt_ch_sdu_buf_released_t {
    pub sdu_buf: ble_data_t,
}
#[test]
fn bindgen_test_layout_ble_l2cap_evt_ch_sdu_buf_released_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_evt_ch_sdu_buf_released_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_l2cap_evt_ch_sdu_buf_released_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_evt_ch_sdu_buf_released_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ble_l2cap_evt_ch_sdu_buf_released_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_ch_sdu_buf_released_t>())).sdu_buf as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_ch_sdu_buf_released_t),
            "::",
            stringify!(sdu_buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_evt_ch_credit_t {
    pub credits: u16,
}
#[test]
fn bindgen_test_layout_ble_l2cap_evt_ch_credit_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_evt_ch_credit_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_l2cap_evt_ch_credit_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_evt_ch_credit_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_l2cap_evt_ch_credit_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_ch_credit_t>())).credits as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_ch_credit_t),
            "::",
            stringify!(credits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_evt_ch_rx_t {
    pub sdu_len: u16,
    pub sdu_buf: ble_data_t,
}
#[test]
fn bindgen_test_layout_ble_l2cap_evt_ch_rx_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_evt_ch_rx_t>(),
        24usize,
        concat!("Size of: ", stringify!(ble_l2cap_evt_ch_rx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_evt_ch_rx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_l2cap_evt_ch_rx_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_evt_ch_rx_t>())).sdu_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_ch_rx_t),
            "::",
            stringify!(sdu_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_evt_ch_rx_t>())).sdu_buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_ch_rx_t),
            "::",
            stringify!(sdu_buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_l2cap_evt_ch_tx_t {
    pub sdu_buf: ble_data_t,
}
#[test]
fn bindgen_test_layout_ble_l2cap_evt_ch_tx_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_evt_ch_tx_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_l2cap_evt_ch_tx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_evt_ch_tx_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_l2cap_evt_ch_tx_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_evt_ch_tx_t>())).sdu_buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_ch_tx_t),
            "::",
            stringify!(sdu_buf)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_l2cap_evt_t {
    pub conn_handle: u16,
    pub local_cid: u16,
    pub params: ble_l2cap_evt_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_l2cap_evt_t__bindgen_ty_1 {
    pub ch_setup_request: ble_l2cap_evt_ch_setup_request_t,
    pub ch_setup_refused: ble_l2cap_evt_ch_setup_refused_t,
    pub ch_setup: ble_l2cap_evt_ch_setup_t,
    pub ch_sdu_buf_released: ble_l2cap_evt_ch_sdu_buf_released_t,
    pub credit: ble_l2cap_evt_ch_credit_t,
    pub rx: ble_l2cap_evt_ch_rx_t,
    pub tx: ble_l2cap_evt_ch_tx_t,
}
#[test]
fn bindgen_test_layout_ble_l2cap_evt_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_evt_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(ble_l2cap_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_evt_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_l2cap_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_t__bindgen_ty_1>())).ch_setup_request as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_t__bindgen_ty_1),
            "::",
            stringify!(ch_setup_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_t__bindgen_ty_1>())).ch_setup_refused as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_t__bindgen_ty_1),
            "::",
            stringify!(ch_setup_refused)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_t__bindgen_ty_1>())).ch_setup as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_t__bindgen_ty_1),
            "::",
            stringify!(ch_setup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_t__bindgen_ty_1>())).ch_sdu_buf_released
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_t__bindgen_ty_1),
            "::",
            stringify!(ch_sdu_buf_released)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_t__bindgen_ty_1>())).credit as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_t__bindgen_ty_1),
            "::",
            stringify!(credit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_t__bindgen_ty_1>())).rx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_t__bindgen_ty_1),
            "::",
            stringify!(rx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_l2cap_evt_t__bindgen_ty_1>())).tx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_t__bindgen_ty_1),
            "::",
            stringify!(tx)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_l2cap_evt_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_l2cap_evt_t>(),
        32usize,
        concat!("Size of: ", stringify!(ble_l2cap_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_l2cap_evt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_l2cap_evt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_evt_t>())).conn_handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_t),
            "::",
            stringify!(conn_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_evt_t>())).local_cid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_t),
            "::",
            stringify!(local_cid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_l2cap_evt_t>())).params as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_l2cap_evt_t),
            "::",
            stringify!(params)
        )
    );
}
extern "C" {
    pub fn sd_ble_l2cap_ch_setup(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_local_cid: *mut u16,
        p_params: *const ble_l2cap_ch_setup_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_l2cap_ch_release(
        adapter: *mut adapter_t,
        conn_handle: u16,
        local_cid: u16,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_l2cap_ch_rx(
        adapter: *mut adapter_t,
        conn_handle: u16,
        local_cid: u16,
        p_sdu_buf: *const ble_data_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_l2cap_ch_tx(
        adapter: *mut adapter_t,
        conn_handle: u16,
        local_cid: u16,
        p_sdu_buf: *const ble_data_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_l2cap_ch_flow_control(
        adapter: *mut adapter_t,
        conn_handle: u16,
        local_cid: u16,
        credits: u16,
        p_credits: *mut u16,
    ) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatt_conn_cfg_t {
    pub att_mtu: u16,
}
#[test]
fn bindgen_test_layout_ble_gatt_conn_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatt_conn_cfg_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_gatt_conn_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatt_conn_cfg_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gatt_conn_cfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatt_conn_cfg_t>())).att_mtu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatt_conn_cfg_t),
            "::",
            stringify!(att_mtu)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatt_char_props_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gatt_char_props_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatt_char_props_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gatt_char_props_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatt_char_props_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gatt_char_props_t))
    );
}
impl ble_gatt_char_props_t {
    #[inline]
    pub fn broadcast(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_broadcast(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn read(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_read(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn write_wo_resp(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_write_wo_resp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn write(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_write(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn notify(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_notify(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn indicate(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_indicate(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth_signed_wr(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_auth_signed_wr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        broadcast: u8,
        read: u8,
        write_wo_resp: u8,
        write: u8,
        notify: u8,
        indicate: u8,
        auth_signed_wr: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let broadcast: u8 = unsafe { ::std::mem::transmute(broadcast) };
            broadcast as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let read: u8 = unsafe { ::std::mem::transmute(read) };
            read as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let write_wo_resp: u8 = unsafe { ::std::mem::transmute(write_wo_resp) };
            write_wo_resp as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let write: u8 = unsafe { ::std::mem::transmute(write) };
            write as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let notify: u8 = unsafe { ::std::mem::transmute(notify) };
            notify as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let indicate: u8 = unsafe { ::std::mem::transmute(indicate) };
            indicate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let auth_signed_wr: u8 = unsafe { ::std::mem::transmute(auth_signed_wr) };
            auth_signed_wr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatt_char_ext_props_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gatt_char_ext_props_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatt_char_ext_props_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gatt_char_ext_props_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatt_char_ext_props_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gatt_char_ext_props_t))
    );
}
impl ble_gatt_char_ext_props_t {
    #[inline]
    pub fn reliable_wr(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reliable_wr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_aux(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wr_aux(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(reliable_wr: u8, wr_aux: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let reliable_wr: u8 = unsafe { ::std::mem::transmute(reliable_wr) };
            reliable_wr as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let wr_aux: u8 = unsafe { ::std::mem::transmute(wr_aux) };
            wr_aux as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_PRIMARY_SERVICES_DISCOVER: BLE_GATTC_SVCS = 155;
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_RELATIONSHIPS_DISCOVER: BLE_GATTC_SVCS = 156;
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_CHARACTERISTICS_DISCOVER: BLE_GATTC_SVCS = 157;
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_DESCRIPTORS_DISCOVER: BLE_GATTC_SVCS = 158;
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_ATTR_INFO_DISCOVER: BLE_GATTC_SVCS = 159;
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_CHAR_VALUE_BY_UUID_READ: BLE_GATTC_SVCS = 160;
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_READ: BLE_GATTC_SVCS = 161;
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_CHAR_VALUES_READ: BLE_GATTC_SVCS = 162;
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_WRITE: BLE_GATTC_SVCS = 163;
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_HV_CONFIRM: BLE_GATTC_SVCS = 164;
pub const BLE_GATTC_SVCS_SD_BLE_GATTC_EXCHANGE_MTU_REQUEST: BLE_GATTC_SVCS = 165;
pub type BLE_GATTC_SVCS = u32;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP: BLE_GATTC_EVTS = 48;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_REL_DISC_RSP: BLE_GATTC_EVTS = 49;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_CHAR_DISC_RSP: BLE_GATTC_EVTS = 50;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_DESC_DISC_RSP: BLE_GATTC_EVTS = 51;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_ATTR_INFO_DISC_RSP: BLE_GATTC_EVTS = 52;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_CHAR_VAL_BY_UUID_READ_RSP: BLE_GATTC_EVTS = 53;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_READ_RSP: BLE_GATTC_EVTS = 54;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_CHAR_VALS_READ_RSP: BLE_GATTC_EVTS = 55;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_WRITE_RSP: BLE_GATTC_EVTS = 56;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_HVX: BLE_GATTC_EVTS = 57;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_EXCHANGE_MTU_RSP: BLE_GATTC_EVTS = 58;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_TIMEOUT: BLE_GATTC_EVTS = 59;
pub const BLE_GATTC_EVTS_BLE_GATTC_EVT_WRITE_CMD_TX_COMPLETE: BLE_GATTC_EVTS = 60;
pub type BLE_GATTC_EVTS = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_conn_cfg_t {
    pub write_cmd_tx_queue_size: u8,
}
#[test]
fn bindgen_test_layout_ble_gattc_conn_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_conn_cfg_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gattc_conn_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_conn_cfg_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gattc_conn_cfg_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_conn_cfg_t>())).write_cmd_tx_queue_size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_conn_cfg_t),
            "::",
            stringify!(write_cmd_tx_queue_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_handle_range_t {
    pub start_handle: u16,
    pub end_handle: u16,
}
#[test]
fn bindgen_test_layout_ble_gattc_handle_range_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_handle_range_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_gattc_handle_range_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_handle_range_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_handle_range_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_handle_range_t>())).start_handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_handle_range_t),
            "::",
            stringify!(start_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_handle_range_t>())).end_handle as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_handle_range_t),
            "::",
            stringify!(end_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_service_t {
    pub uuid: ble_uuid_t,
    pub handle_range: ble_gattc_handle_range_t,
}
#[test]
fn bindgen_test_layout_ble_gattc_service_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_service_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gattc_service_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_service_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_service_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_service_t>())).uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_service_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_service_t>())).handle_range as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_service_t),
            "::",
            stringify!(handle_range)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_include_t {
    pub handle: u16,
    pub included_srvc: ble_gattc_service_t,
}
#[test]
fn bindgen_test_layout_ble_gattc_include_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_include_t>(),
        10usize,
        concat!("Size of: ", stringify!(ble_gattc_include_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_include_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_include_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_include_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_include_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_include_t>())).included_srvc as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_include_t),
            "::",
            stringify!(included_srvc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_char_t {
    pub uuid: ble_uuid_t,
    pub char_props: ble_gatt_char_props_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub handle_decl: u16,
    pub handle_value: u16,
}
#[test]
fn bindgen_test_layout_ble_gattc_char_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_char_t>(),
        10usize,
        concat!("Size of: ", stringify!(ble_gattc_char_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_char_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_char_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_char_t>())).uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_char_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_char_t>())).char_props as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_char_t),
            "::",
            stringify!(char_props)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_char_t>())).handle_decl as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_char_t),
            "::",
            stringify!(handle_decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_char_t>())).handle_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_char_t),
            "::",
            stringify!(handle_value)
        )
    );
}
impl ble_gattc_char_t {
    #[inline]
    pub fn char_ext_props(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_char_ext_props(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(char_ext_props: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let char_ext_props: u8 = unsafe { ::std::mem::transmute(char_ext_props) };
            char_ext_props as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_desc_t {
    pub handle: u16,
    pub uuid: ble_uuid_t,
}
#[test]
fn bindgen_test_layout_ble_gattc_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_desc_t>(),
        6usize,
        concat!("Size of: ", stringify!(ble_gattc_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_desc_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_desc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_desc_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_desc_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_desc_t>())).uuid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_desc_t),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_write_params_t {
    pub write_op: u8,
    pub flags: u8,
    pub handle: u16,
    pub offset: u16,
    pub len: u16,
    pub p_value: *const u8,
}
#[test]
fn bindgen_test_layout_ble_gattc_write_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_write_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gattc_write_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_write_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gattc_write_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_write_params_t>())).write_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_write_params_t),
            "::",
            stringify!(write_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_write_params_t>())).flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_write_params_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_write_params_t>())).handle as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_write_params_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_write_params_t>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_write_params_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_write_params_t>())).len as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_write_params_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_write_params_t>())).p_value as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_write_params_t),
            "::",
            stringify!(p_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_attr_info16_t {
    pub handle: u16,
    pub uuid: ble_uuid_t,
}
#[test]
fn bindgen_test_layout_ble_gattc_attr_info16_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_attr_info16_t>(),
        6usize,
        concat!("Size of: ", stringify!(ble_gattc_attr_info16_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_attr_info16_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_attr_info16_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_attr_info16_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_attr_info16_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_attr_info16_t>())).uuid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_attr_info16_t),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_attr_info128_t {
    pub handle: u16,
    pub uuid: ble_uuid128_t,
}
#[test]
fn bindgen_test_layout_ble_gattc_attr_info128_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_attr_info128_t>(),
        18usize,
        concat!("Size of: ", stringify!(ble_gattc_attr_info128_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_attr_info128_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_attr_info128_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_attr_info128_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_attr_info128_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_attr_info128_t>())).uuid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_attr_info128_t),
            "::",
            stringify!(uuid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_prim_srvc_disc_rsp_t {
    pub count: u16,
    pub services: [ble_gattc_service_t; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_prim_srvc_disc_rsp_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_prim_srvc_disc_rsp_t>(),
        10usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_prim_srvc_disc_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_prim_srvc_disc_rsp_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gattc_evt_prim_srvc_disc_rsp_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_prim_srvc_disc_rsp_t>())).count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_prim_srvc_disc_rsp_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_prim_srvc_disc_rsp_t>())).services as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_prim_srvc_disc_rsp_t),
            "::",
            stringify!(services)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_rel_disc_rsp_t {
    pub count: u16,
    pub includes: [ble_gattc_include_t; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_rel_disc_rsp_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_rel_disc_rsp_t>(),
        12usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_rel_disc_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_rel_disc_rsp_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_evt_rel_disc_rsp_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_rel_disc_rsp_t>())).count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_rel_disc_rsp_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_rel_disc_rsp_t>())).includes as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_rel_disc_rsp_t),
            "::",
            stringify!(includes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_char_disc_rsp_t {
    pub count: u16,
    pub chars: [ble_gattc_char_t; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_char_disc_rsp_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_char_disc_rsp_t>(),
        12usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_char_disc_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_char_disc_rsp_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_evt_char_disc_rsp_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_char_disc_rsp_t>())).count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_char_disc_rsp_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_char_disc_rsp_t>())).chars as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_char_disc_rsp_t),
            "::",
            stringify!(chars)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_desc_disc_rsp_t {
    pub count: u16,
    pub descs: [ble_gattc_desc_t; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_desc_disc_rsp_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_desc_disc_rsp_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_desc_disc_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_desc_disc_rsp_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_evt_desc_disc_rsp_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_desc_disc_rsp_t>())).count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_desc_disc_rsp_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_desc_disc_rsp_t>())).descs as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_desc_disc_rsp_t),
            "::",
            stringify!(descs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_gattc_evt_attr_info_disc_rsp_t {
    pub count: u16,
    pub format: u8,
    pub info: ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1 {
    pub attr_info16: [ble_gattc_attr_info16_t; 1usize],
    pub attr_info128: [ble_gattc_attr_info128_t; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1>(),
        18usize,
        concat!(
            "Size of: ",
            stringify!(ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1>())).attr_info16
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1),
            "::",
            stringify!(attr_info16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1>()))
                .attr_info128 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_attr_info_disc_rsp_t__bindgen_ty_1),
            "::",
            stringify!(attr_info128)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_attr_info_disc_rsp_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_attr_info_disc_rsp_t>(),
        22usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_attr_info_disc_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_attr_info_disc_rsp_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gattc_evt_attr_info_disc_rsp_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_attr_info_disc_rsp_t>())).count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_attr_info_disc_rsp_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_attr_info_disc_rsp_t>())).format as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_attr_info_disc_rsp_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_attr_info_disc_rsp_t>())).info as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_attr_info_disc_rsp_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_handle_value_t {
    pub handle: u16,
    pub p_value: *mut u8,
}
#[test]
fn bindgen_test_layout_ble_gattc_handle_value_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_handle_value_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gattc_handle_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_handle_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gattc_handle_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_handle_value_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_handle_value_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_handle_value_t>())).p_value as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_handle_value_t),
            "::",
            stringify!(p_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_char_val_by_uuid_read_rsp_t {
    pub count: u16,
    pub value_len: u16,
    pub handle_value: [u8; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_char_val_by_uuid_read_rsp_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_char_val_by_uuid_read_rsp_t>(),
        6usize,
        concat!(
            "Size of: ",
            stringify!(ble_gattc_evt_char_val_by_uuid_read_rsp_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_char_val_by_uuid_read_rsp_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gattc_evt_char_val_by_uuid_read_rsp_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_char_val_by_uuid_read_rsp_t>())).count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_char_val_by_uuid_read_rsp_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_char_val_by_uuid_read_rsp_t>())).value_len
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_char_val_by_uuid_read_rsp_t),
            "::",
            stringify!(value_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_char_val_by_uuid_read_rsp_t>())).handle_value
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_char_val_by_uuid_read_rsp_t),
            "::",
            stringify!(handle_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_read_rsp_t {
    pub handle: u16,
    pub offset: u16,
    pub len: u16,
    pub data: [u8; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_read_rsp_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_read_rsp_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_read_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_read_rsp_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_evt_read_rsp_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_read_rsp_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_read_rsp_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_read_rsp_t>())).offset as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_read_rsp_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_read_rsp_t>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_read_rsp_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_read_rsp_t>())).data as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_read_rsp_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_char_vals_read_rsp_t {
    pub len: u16,
    pub values: [u8; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_char_vals_read_rsp_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_char_vals_read_rsp_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_char_vals_read_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_char_vals_read_rsp_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gattc_evt_char_vals_read_rsp_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_char_vals_read_rsp_t>())).len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_char_vals_read_rsp_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_char_vals_read_rsp_t>())).values as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_char_vals_read_rsp_t),
            "::",
            stringify!(values)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_write_rsp_t {
    pub handle: u16,
    pub write_op: u8,
    pub offset: u16,
    pub len: u16,
    pub data: [u8; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_write_rsp_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_write_rsp_t>(),
        10usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_write_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_write_rsp_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_evt_write_rsp_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_write_rsp_t>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_write_rsp_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_write_rsp_t>())).write_op as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_write_rsp_t),
            "::",
            stringify!(write_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_write_rsp_t>())).offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_write_rsp_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_write_rsp_t>())).len as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_write_rsp_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_write_rsp_t>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_write_rsp_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_hvx_t {
    pub handle: u16,
    pub type_: u8,
    pub len: u16,
    pub data: [u8; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_hvx_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_hvx_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_hvx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_hvx_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_evt_hvx_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_hvx_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_hvx_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_hvx_t>())).type_ as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_hvx_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_hvx_t>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_hvx_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_hvx_t>())).data as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_hvx_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_exchange_mtu_rsp_t {
    pub server_rx_mtu: u16,
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_exchange_mtu_rsp_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_exchange_mtu_rsp_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_exchange_mtu_rsp_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_exchange_mtu_rsp_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gattc_evt_exchange_mtu_rsp_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_exchange_mtu_rsp_t>())).server_rx_mtu as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_exchange_mtu_rsp_t),
            "::",
            stringify!(server_rx_mtu)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_timeout_t {
    pub src: u8,
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_timeout_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_timeout_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_timeout_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_timeout_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gattc_evt_timeout_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_timeout_t>())).src as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_timeout_t),
            "::",
            stringify!(src)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gattc_evt_write_cmd_tx_complete_t {
    pub count: u8,
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_write_cmd_tx_complete_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_write_cmd_tx_complete_t>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(ble_gattc_evt_write_cmd_tx_complete_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_write_cmd_tx_complete_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gattc_evt_write_cmd_tx_complete_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_write_cmd_tx_complete_t>())).count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_write_cmd_tx_complete_t),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_gattc_evt_t {
    pub conn_handle: u16,
    pub gatt_status: u16,
    pub error_handle: u16,
    pub params: ble_gattc_evt_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_gattc_evt_t__bindgen_ty_1 {
    pub prim_srvc_disc_rsp: ble_gattc_evt_prim_srvc_disc_rsp_t,
    pub rel_disc_rsp: ble_gattc_evt_rel_disc_rsp_t,
    pub char_disc_rsp: ble_gattc_evt_char_disc_rsp_t,
    pub desc_disc_rsp: ble_gattc_evt_desc_disc_rsp_t,
    pub char_val_by_uuid_read_rsp: ble_gattc_evt_char_val_by_uuid_read_rsp_t,
    pub read_rsp: ble_gattc_evt_read_rsp_t,
    pub char_vals_read_rsp: ble_gattc_evt_char_vals_read_rsp_t,
    pub write_rsp: ble_gattc_evt_write_rsp_t,
    pub hvx: ble_gattc_evt_hvx_t,
    pub exchange_mtu_rsp: ble_gattc_evt_exchange_mtu_rsp_t,
    pub timeout: ble_gattc_evt_timeout_t,
    pub attr_info_disc_rsp: ble_gattc_evt_attr_info_disc_rsp_t,
    pub write_cmd_tx_complete: ble_gattc_evt_write_cmd_tx_complete_t,
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_t__bindgen_ty_1>(),
        22usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_t__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).prim_srvc_disc_rsp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(prim_srvc_disc_rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).rel_disc_rsp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(rel_disc_rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).char_disc_rsp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(char_disc_rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).desc_disc_rsp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(desc_disc_rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).char_val_by_uuid_read_rsp
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(char_val_by_uuid_read_rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).read_rsp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(read_rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).char_vals_read_rsp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(char_vals_read_rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).write_rsp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(write_rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).hvx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(hvx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).exchange_mtu_rsp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(exchange_mtu_rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).timeout as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).attr_info_disc_rsp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(attr_info_disc_rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gattc_evt_t__bindgen_ty_1>())).write_cmd_tx_complete
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t__bindgen_ty_1),
            "::",
            stringify!(write_cmd_tx_complete)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_gattc_evt_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gattc_evt_t>(),
        28usize,
        concat!("Size of: ", stringify!(ble_gattc_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gattc_evt_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gattc_evt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_t>())).conn_handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t),
            "::",
            stringify!(conn_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_t>())).gatt_status as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t),
            "::",
            stringify!(gatt_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_t>())).error_handle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t),
            "::",
            stringify!(error_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gattc_evt_t>())).params as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gattc_evt_t),
            "::",
            stringify!(params)
        )
    );
}
extern "C" {
    pub fn sd_ble_gattc_primary_services_discover(
        adapter: *mut adapter_t,
        conn_handle: u16,
        start_handle: u16,
        p_srvc_uuid: *const ble_uuid_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gattc_relationships_discover(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_handle_range: *const ble_gattc_handle_range_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gattc_characteristics_discover(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_handle_range: *const ble_gattc_handle_range_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gattc_descriptors_discover(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_handle_range: *const ble_gattc_handle_range_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gattc_char_value_by_uuid_read(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_uuid: *const ble_uuid_t,
        p_handle_range: *const ble_gattc_handle_range_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gattc_read(
        adapter: *mut adapter_t,
        conn_handle: u16,
        handle: u16,
        offset: u16,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gattc_char_values_read(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_handles: *const u16,
        handle_count: u16,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gattc_write(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_write_params: *const ble_gattc_write_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gattc_hv_confirm(adapter: *mut adapter_t, conn_handle: u16, handle: u16) -> u32;
}
extern "C" {
    pub fn sd_ble_gattc_attr_info_discover(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_handle_range: *const ble_gattc_handle_range_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gattc_exchange_mtu_request(
        adapter: *mut adapter_t,
        conn_handle: u16,
        client_rx_mtu: u16,
    ) -> u32;
}
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_SERVICE_ADD: BLE_GATTS_SVCS = 168;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_INCLUDE_ADD: BLE_GATTS_SVCS = 169;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_CHARACTERISTIC_ADD: BLE_GATTS_SVCS = 170;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_DESCRIPTOR_ADD: BLE_GATTS_SVCS = 171;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_VALUE_SET: BLE_GATTS_SVCS = 172;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_VALUE_GET: BLE_GATTS_SVCS = 173;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_HVX: BLE_GATTS_SVCS = 174;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_SERVICE_CHANGED: BLE_GATTS_SVCS = 175;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_RW_AUTHORIZE_REPLY: BLE_GATTS_SVCS = 176;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_SYS_ATTR_SET: BLE_GATTS_SVCS = 177;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_SYS_ATTR_GET: BLE_GATTS_SVCS = 178;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_INITIAL_USER_HANDLE_GET: BLE_GATTS_SVCS = 179;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_ATTR_GET: BLE_GATTS_SVCS = 180;
pub const BLE_GATTS_SVCS_SD_BLE_GATTS_EXCHANGE_MTU_REPLY: BLE_GATTS_SVCS = 181;
pub type BLE_GATTS_SVCS = u32;
pub const BLE_GATTS_EVTS_BLE_GATTS_EVT_WRITE: BLE_GATTS_EVTS = 80;
pub const BLE_GATTS_EVTS_BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST: BLE_GATTS_EVTS = 81;
pub const BLE_GATTS_EVTS_BLE_GATTS_EVT_SYS_ATTR_MISSING: BLE_GATTS_EVTS = 82;
pub const BLE_GATTS_EVTS_BLE_GATTS_EVT_HVC: BLE_GATTS_EVTS = 83;
pub const BLE_GATTS_EVTS_BLE_GATTS_EVT_SC_CONFIRM: BLE_GATTS_EVTS = 84;
pub const BLE_GATTS_EVTS_BLE_GATTS_EVT_EXCHANGE_MTU_REQUEST: BLE_GATTS_EVTS = 85;
pub const BLE_GATTS_EVTS_BLE_GATTS_EVT_TIMEOUT: BLE_GATTS_EVTS = 86;
pub const BLE_GATTS_EVTS_BLE_GATTS_EVT_HVN_TX_COMPLETE: BLE_GATTS_EVTS = 87;
pub type BLE_GATTS_EVTS = u32;
pub const BLE_GATTS_CFGS_BLE_GATTS_CFG_SERVICE_CHANGED: BLE_GATTS_CFGS = 160;
pub const BLE_GATTS_CFGS_BLE_GATTS_CFG_ATTR_TAB_SIZE: BLE_GATTS_CFGS = 161;
pub type BLE_GATTS_CFGS = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_conn_cfg_t {
    pub hvn_tx_queue_size: u8,
}
#[test]
fn bindgen_test_layout_ble_gatts_conn_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_conn_cfg_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gatts_conn_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_conn_cfg_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gatts_conn_cfg_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_conn_cfg_t>())).hvn_tx_queue_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_conn_cfg_t),
            "::",
            stringify!(hvn_tx_queue_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_attr_md_t {
    pub read_perm: ble_gap_conn_sec_mode_t,
    pub write_perm: ble_gap_conn_sec_mode_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gatts_attr_md_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_attr_md_t>(),
        3usize,
        concat!("Size of: ", stringify!(ble_gatts_attr_md_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_attr_md_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gatts_attr_md_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_attr_md_t>())).read_perm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_attr_md_t),
            "::",
            stringify!(read_perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_attr_md_t>())).write_perm as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_attr_md_t),
            "::",
            stringify!(write_perm)
        )
    );
}
impl ble_gatts_attr_md_t {
    #[inline]
    pub fn vlen(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_vlen(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vloc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_vloc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rd_auth(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rd_auth(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_auth(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wr_auth(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        vlen: u8,
        vloc: u8,
        rd_auth: u8,
        wr_auth: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let vlen: u8 = unsafe { ::std::mem::transmute(vlen) };
            vlen as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let vloc: u8 = unsafe { ::std::mem::transmute(vloc) };
            vloc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rd_auth: u8 = unsafe { ::std::mem::transmute(rd_auth) };
            rd_auth as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let wr_auth: u8 = unsafe { ::std::mem::transmute(wr_auth) };
            wr_auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_attr_t {
    pub p_uuid: *const ble_uuid_t,
    pub p_attr_md: *const ble_gatts_attr_md_t,
    pub init_len: u16,
    pub init_offs: u16,
    pub max_len: u16,
    pub p_value: *mut u8,
}
#[test]
fn bindgen_test_layout_ble_gatts_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_attr_t>(),
        32usize,
        concat!("Size of: ", stringify!(ble_gatts_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gatts_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_attr_t>())).p_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_attr_t),
            "::",
            stringify!(p_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_attr_t>())).p_attr_md as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_attr_t),
            "::",
            stringify!(p_attr_md)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_attr_t>())).init_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_attr_t),
            "::",
            stringify!(init_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_attr_t>())).init_offs as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_attr_t),
            "::",
            stringify!(init_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_attr_t>())).max_len as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_attr_t),
            "::",
            stringify!(max_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_attr_t>())).p_value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_attr_t),
            "::",
            stringify!(p_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_value_t {
    pub len: u16,
    pub offset: u16,
    pub p_value: *mut u8,
}
#[test]
fn bindgen_test_layout_ble_gatts_value_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_value_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gatts_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gatts_value_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_value_t>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_value_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_value_t>())).offset as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_value_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_value_t>())).p_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_value_t),
            "::",
            stringify!(p_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_char_pf_t {
    pub format: u8,
    pub exponent: i8,
    pub unit: u16,
    pub name_space: u8,
    pub desc: u16,
}
#[test]
fn bindgen_test_layout_ble_gatts_char_pf_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_char_pf_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gatts_char_pf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_char_pf_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gatts_char_pf_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_char_pf_t>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_pf_t),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_char_pf_t>())).exponent as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_pf_t),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_char_pf_t>())).unit as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_pf_t),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_char_pf_t>())).name_space as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_pf_t),
            "::",
            stringify!(name_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_char_pf_t>())).desc as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_pf_t),
            "::",
            stringify!(desc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_char_md_t {
    pub char_props: ble_gatt_char_props_t,
    pub char_ext_props: ble_gatt_char_ext_props_t,
    pub p_char_user_desc: *const u8,
    pub char_user_desc_max_size: u16,
    pub char_user_desc_size: u16,
    pub p_char_pf: *const ble_gatts_char_pf_t,
    pub p_user_desc_md: *const ble_gatts_attr_md_t,
    pub p_cccd_md: *const ble_gatts_attr_md_t,
    pub p_sccd_md: *const ble_gatts_attr_md_t,
}
#[test]
fn bindgen_test_layout_ble_gatts_char_md_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_char_md_t>(),
        56usize,
        concat!("Size of: ", stringify!(ble_gatts_char_md_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_char_md_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gatts_char_md_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_char_md_t>())).char_props as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_md_t),
            "::",
            stringify!(char_props)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_char_md_t>())).char_ext_props as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_md_t),
            "::",
            stringify!(char_ext_props)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_char_md_t>())).p_char_user_desc as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_md_t),
            "::",
            stringify!(p_char_user_desc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_char_md_t>())).char_user_desc_max_size as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_md_t),
            "::",
            stringify!(char_user_desc_max_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_char_md_t>())).char_user_desc_size as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_md_t),
            "::",
            stringify!(char_user_desc_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_char_md_t>())).p_char_pf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_md_t),
            "::",
            stringify!(p_char_pf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_char_md_t>())).p_user_desc_md as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_md_t),
            "::",
            stringify!(p_user_desc_md)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_char_md_t>())).p_cccd_md as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_md_t),
            "::",
            stringify!(p_cccd_md)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_char_md_t>())).p_sccd_md as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_md_t),
            "::",
            stringify!(p_sccd_md)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_char_handles_t {
    pub value_handle: u16,
    pub user_desc_handle: u16,
    pub cccd_handle: u16,
    pub sccd_handle: u16,
}
#[test]
fn bindgen_test_layout_ble_gatts_char_handles_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_char_handles_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gatts_char_handles_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_char_handles_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gatts_char_handles_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_char_handles_t>())).value_handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_handles_t),
            "::",
            stringify!(value_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_char_handles_t>())).user_desc_handle as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_handles_t),
            "::",
            stringify!(user_desc_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_char_handles_t>())).cccd_handle as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_handles_t),
            "::",
            stringify!(cccd_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_char_handles_t>())).sccd_handle as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_char_handles_t),
            "::",
            stringify!(sccd_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_hvx_params_t {
    pub handle: u16,
    pub type_: u8,
    pub offset: u16,
    pub p_len: *mut u16,
    pub p_data: *const u8,
}
#[test]
fn bindgen_test_layout_ble_gatts_hvx_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_hvx_params_t>(),
        24usize,
        concat!("Size of: ", stringify!(ble_gatts_hvx_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_hvx_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gatts_hvx_params_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_hvx_params_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_hvx_params_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_hvx_params_t>())).type_ as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_hvx_params_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_hvx_params_t>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_hvx_params_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_hvx_params_t>())).p_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_hvx_params_t),
            "::",
            stringify!(p_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_hvx_params_t>())).p_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_hvx_params_t),
            "::",
            stringify!(p_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_authorize_params_t {
    pub gatt_status: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub offset: u16,
    pub len: u16,
    pub p_data: *const u8,
}
#[test]
fn bindgen_test_layout_ble_gatts_authorize_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_authorize_params_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gatts_authorize_params_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_authorize_params_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_gatts_authorize_params_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_authorize_params_t>())).gatt_status as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_authorize_params_t),
            "::",
            stringify!(gatt_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_authorize_params_t>())).offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_authorize_params_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_authorize_params_t>())).len as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_authorize_params_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_authorize_params_t>())).p_data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_authorize_params_t),
            "::",
            stringify!(p_data)
        )
    );
}
impl ble_gatts_authorize_params_t {
    #[inline]
    pub fn update(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_update(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(update: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let update: u8 = unsafe { ::std::mem::transmute(update) };
            update as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_gatts_rw_authorize_reply_params_t {
    pub type_: u8,
    pub params: ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1 {
    pub read: ble_gatts_authorize_params_t,
    pub write: ble_gatts_authorize_params_t,
}
#[test]
fn bindgen_test_layout_ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1>())).read
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1>())).write
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_rw_authorize_reply_params_t__bindgen_ty_1),
            "::",
            stringify!(write)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_gatts_rw_authorize_reply_params_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_rw_authorize_reply_params_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(ble_gatts_rw_authorize_reply_params_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_rw_authorize_reply_params_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gatts_rw_authorize_reply_params_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_rw_authorize_reply_params_t>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_rw_authorize_reply_params_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_rw_authorize_reply_params_t>())).params as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_rw_authorize_reply_params_t),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_cfg_service_changed_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_gatts_cfg_service_changed_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_cfg_service_changed_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gatts_cfg_service_changed_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_cfg_service_changed_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gatts_cfg_service_changed_t))
    );
}
impl ble_gatts_cfg_service_changed_t {
    #[inline]
    pub fn service_changed(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_service_changed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(service_changed: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let service_changed: u8 = unsafe { ::std::mem::transmute(service_changed) };
            service_changed as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_cfg_attr_tab_size_t {
    pub attr_tab_size: u32,
}
#[test]
fn bindgen_test_layout_ble_gatts_cfg_attr_tab_size_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_cfg_attr_tab_size_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_gatts_cfg_attr_tab_size_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_cfg_attr_tab_size_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ble_gatts_cfg_attr_tab_size_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_cfg_attr_tab_size_t>())).attr_tab_size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_cfg_attr_tab_size_t),
            "::",
            stringify!(attr_tab_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_gatts_cfg_t {
    pub service_changed: ble_gatts_cfg_service_changed_t,
    pub attr_tab_size: ble_gatts_cfg_attr_tab_size_t,
}
#[test]
fn bindgen_test_layout_ble_gatts_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_cfg_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_gatts_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ble_gatts_cfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_cfg_t>())).service_changed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_cfg_t),
            "::",
            stringify!(service_changed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_cfg_t>())).attr_tab_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_cfg_t),
            "::",
            stringify!(attr_tab_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_evt_write_t {
    pub handle: u16,
    pub uuid: ble_uuid_t,
    pub op: u8,
    pub auth_required: u8,
    pub offset: u16,
    pub len: u16,
    pub data: [u8; 1usize],
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_write_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_write_t>(),
        14usize,
        concat!("Size of: ", stringify!(ble_gatts_evt_write_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_write_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gatts_evt_write_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_write_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_write_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_write_t>())).uuid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_write_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_write_t>())).op as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_write_t),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_write_t>())).auth_required as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_write_t),
            "::",
            stringify!(auth_required)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_write_t>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_write_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_write_t>())).len as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_write_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_write_t>())).data as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_write_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_evt_read_t {
    pub handle: u16,
    pub uuid: ble_uuid_t,
    pub offset: u16,
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_read_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_read_t>(),
        8usize,
        concat!("Size of: ", stringify!(ble_gatts_evt_read_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_read_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gatts_evt_read_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_read_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_read_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_read_t>())).uuid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_read_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_read_t>())).offset as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_read_t),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_gatts_evt_rw_authorize_request_t {
    pub type_: u8,
    pub request: ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1 {
    pub read: ble_gatts_evt_read_t,
    pub write: ble_gatts_evt_write_t,
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1>(),
        14usize,
        concat!(
            "Size of: ",
            stringify!(ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1>())).read
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1>())).write
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_rw_authorize_request_t__bindgen_ty_1),
            "::",
            stringify!(write)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_rw_authorize_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_rw_authorize_request_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ble_gatts_evt_rw_authorize_request_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_rw_authorize_request_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gatts_evt_rw_authorize_request_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_rw_authorize_request_t>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_rw_authorize_request_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_rw_authorize_request_t>())).request as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_rw_authorize_request_t),
            "::",
            stringify!(request)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_evt_sys_attr_missing_t {
    pub hint: u8,
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_sys_attr_missing_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_sys_attr_missing_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gatts_evt_sys_attr_missing_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_sys_attr_missing_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gatts_evt_sys_attr_missing_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_sys_attr_missing_t>())).hint as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_sys_attr_missing_t),
            "::",
            stringify!(hint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_evt_hvc_t {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_hvc_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_hvc_t>(),
        2usize,
        concat!("Size of: ", stringify!(ble_gatts_evt_hvc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_hvc_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gatts_evt_hvc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_hvc_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_hvc_t),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_evt_exchange_mtu_request_t {
    pub client_rx_mtu: u16,
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_exchange_mtu_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_exchange_mtu_request_t>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(ble_gatts_evt_exchange_mtu_request_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_exchange_mtu_request_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(ble_gatts_evt_exchange_mtu_request_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_exchange_mtu_request_t>())).client_rx_mtu
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_exchange_mtu_request_t),
            "::",
            stringify!(client_rx_mtu)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_evt_timeout_t {
    pub src: u8,
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_timeout_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_timeout_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gatts_evt_timeout_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_timeout_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gatts_evt_timeout_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_timeout_t>())).src as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_timeout_t),
            "::",
            stringify!(src)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_gatts_evt_hvn_tx_complete_t {
    pub count: u8,
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_hvn_tx_complete_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_hvn_tx_complete_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_gatts_evt_hvn_tx_complete_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_hvn_tx_complete_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_gatts_evt_hvn_tx_complete_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_hvn_tx_complete_t>())).count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_hvn_tx_complete_t),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_gatts_evt_t {
    pub conn_handle: u16,
    pub params: ble_gatts_evt_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_gatts_evt_t__bindgen_ty_1 {
    pub write: ble_gatts_evt_write_t,
    pub authorize_request: ble_gatts_evt_rw_authorize_request_t,
    pub sys_attr_missing: ble_gatts_evt_sys_attr_missing_t,
    pub hvc: ble_gatts_evt_hvc_t,
    pub exchange_mtu_request: ble_gatts_evt_exchange_mtu_request_t,
    pub timeout: ble_gatts_evt_timeout_t,
    pub hvn_tx_complete: ble_gatts_evt_hvn_tx_complete_t,
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ble_gatts_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_t__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gatts_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_t__bindgen_ty_1>())).write as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_t__bindgen_ty_1),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_t__bindgen_ty_1>())).authorize_request as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_t__bindgen_ty_1),
            "::",
            stringify!(authorize_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_t__bindgen_ty_1>())).sys_attr_missing as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_t__bindgen_ty_1),
            "::",
            stringify!(sys_attr_missing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_t__bindgen_ty_1>())).hvc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_t__bindgen_ty_1),
            "::",
            stringify!(hvc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_t__bindgen_ty_1>())).exchange_mtu_request
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_t__bindgen_ty_1),
            "::",
            stringify!(exchange_mtu_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_t__bindgen_ty_1>())).timeout as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_t__bindgen_ty_1),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_gatts_evt_t__bindgen_ty_1>())).hvn_tx_complete as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_t__bindgen_ty_1),
            "::",
            stringify!(hvn_tx_complete)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_gatts_evt_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_gatts_evt_t>(),
        18usize,
        concat!("Size of: ", stringify!(ble_gatts_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_gatts_evt_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_gatts_evt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_t>())).conn_handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_t),
            "::",
            stringify!(conn_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_gatts_evt_t>())).params as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_gatts_evt_t),
            "::",
            stringify!(params)
        )
    );
}
extern "C" {
    pub fn sd_ble_gatts_service_add(
        adapter: *mut adapter_t,
        type_: u8,
        p_uuid: *const ble_uuid_t,
        p_handle: *mut u16,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_include_add(
        adapter: *mut adapter_t,
        service_handle: u16,
        inc_srvc_handle: u16,
        p_include_handle: *mut u16,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_characteristic_add(
        adapter: *mut adapter_t,
        service_handle: u16,
        p_char_md: *const ble_gatts_char_md_t,
        p_attr_char_value: *const ble_gatts_attr_t,
        p_handles: *mut ble_gatts_char_handles_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_descriptor_add(
        adapter: *mut adapter_t,
        char_handle: u16,
        p_attr: *const ble_gatts_attr_t,
        p_handle: *mut u16,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_value_set(
        adapter: *mut adapter_t,
        conn_handle: u16,
        handle: u16,
        p_value: *mut ble_gatts_value_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_value_get(
        adapter: *mut adapter_t,
        conn_handle: u16,
        handle: u16,
        p_value: *mut ble_gatts_value_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_hvx(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_hvx_params: *const ble_gatts_hvx_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_service_changed(
        adapter: *mut adapter_t,
        conn_handle: u16,
        start_handle: u16,
        end_handle: u16,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_rw_authorize_reply(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_rw_authorize_reply_params: *const ble_gatts_rw_authorize_reply_params_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_sys_attr_set(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_sys_attr_data: *const u8,
        len: u16,
        flags: u32,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_sys_attr_get(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_sys_attr_data: *mut u8,
        p_len: *mut u16,
        flags: u32,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_initial_user_handle_get(adapter: *mut adapter_t, p_handle: *mut u16)
        -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_attr_get(
        adapter: *mut adapter_t,
        handle: u16,
        p_uuid: *mut ble_uuid_t,
        p_md: *mut ble_gatts_attr_md_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_gatts_exchange_mtu_reply(
        adapter: *mut adapter_t,
        conn_handle: u16,
        server_rx_mtu: u16,
    ) -> u32;
}
pub const BLE_COMMON_SVCS_SD_BLE_ENABLE: BLE_COMMON_SVCS = 96;
pub const BLE_COMMON_SVCS_SD_BLE_EVT_GET: BLE_COMMON_SVCS = 97;
pub const BLE_COMMON_SVCS_SD_BLE_UUID_VS_ADD: BLE_COMMON_SVCS = 98;
pub const BLE_COMMON_SVCS_SD_BLE_UUID_DECODE: BLE_COMMON_SVCS = 99;
pub const BLE_COMMON_SVCS_SD_BLE_UUID_ENCODE: BLE_COMMON_SVCS = 100;
pub const BLE_COMMON_SVCS_SD_BLE_VERSION_GET: BLE_COMMON_SVCS = 101;
pub const BLE_COMMON_SVCS_SD_BLE_USER_MEM_REPLY: BLE_COMMON_SVCS = 102;
pub const BLE_COMMON_SVCS_SD_BLE_OPT_SET: BLE_COMMON_SVCS = 103;
pub const BLE_COMMON_SVCS_SD_BLE_OPT_GET: BLE_COMMON_SVCS = 104;
pub const BLE_COMMON_SVCS_SD_BLE_CFG_SET: BLE_COMMON_SVCS = 105;
pub const BLE_COMMON_SVCS_SD_BLE_UUID_VS_REMOVE: BLE_COMMON_SVCS = 106;
pub type BLE_COMMON_SVCS = u32;
pub const BLE_COMMON_EVTS_BLE_EVT_USER_MEM_REQUEST: BLE_COMMON_EVTS = 1;
pub const BLE_COMMON_EVTS_BLE_EVT_USER_MEM_RELEASE: BLE_COMMON_EVTS = 2;
pub type BLE_COMMON_EVTS = u32;
pub const BLE_CONN_CFGS_BLE_CONN_CFG_GAP: BLE_CONN_CFGS = 32;
pub const BLE_CONN_CFGS_BLE_CONN_CFG_GATTC: BLE_CONN_CFGS = 33;
pub const BLE_CONN_CFGS_BLE_CONN_CFG_GATTS: BLE_CONN_CFGS = 34;
pub const BLE_CONN_CFGS_BLE_CONN_CFG_GATT: BLE_CONN_CFGS = 35;
pub const BLE_CONN_CFGS_BLE_CONN_CFG_L2CAP: BLE_CONN_CFGS = 36;
pub type BLE_CONN_CFGS = u32;
pub const BLE_COMMON_CFGS_BLE_COMMON_CFG_VS_UUID: BLE_COMMON_CFGS = 1;
pub type BLE_COMMON_CFGS = u32;
pub const BLE_COMMON_OPTS_BLE_COMMON_OPT_PA_LNA: BLE_COMMON_OPTS = 1;
pub const BLE_COMMON_OPTS_BLE_COMMON_OPT_CONN_EVT_EXT: BLE_COMMON_OPTS = 2;
pub const BLE_COMMON_OPTS_BLE_COMMON_OPT_EXTENDED_RC_CAL: BLE_COMMON_OPTS = 3;
pub type BLE_COMMON_OPTS = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_user_mem_block_t {
    pub p_mem: *mut u8,
    pub len: u16,
}
#[test]
fn bindgen_test_layout_ble_user_mem_block_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_user_mem_block_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_user_mem_block_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_user_mem_block_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_user_mem_block_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_user_mem_block_t>())).p_mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_user_mem_block_t),
            "::",
            stringify!(p_mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_user_mem_block_t>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_user_mem_block_t),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_evt_user_mem_request_t {
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_ble_evt_user_mem_request_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_evt_user_mem_request_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_evt_user_mem_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_evt_user_mem_request_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_evt_user_mem_request_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_evt_user_mem_request_t>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_user_mem_request_t),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_evt_user_mem_release_t {
    pub type_: u8,
    pub mem_block: ble_user_mem_block_t,
}
#[test]
fn bindgen_test_layout_ble_evt_user_mem_release_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_evt_user_mem_release_t>(),
        24usize,
        concat!("Size of: ", stringify!(ble_evt_user_mem_release_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_evt_user_mem_release_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_evt_user_mem_release_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_evt_user_mem_release_t>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_user_mem_release_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_evt_user_mem_release_t>())).mem_block as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_user_mem_release_t),
            "::",
            stringify!(mem_block)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_common_evt_t {
    pub conn_handle: u16,
    pub params: ble_common_evt_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_common_evt_t__bindgen_ty_1 {
    pub user_mem_request: ble_evt_user_mem_request_t,
    pub user_mem_release: ble_evt_user_mem_release_t,
}
#[test]
fn bindgen_test_layout_ble_common_evt_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_common_evt_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(ble_common_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_common_evt_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_common_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_common_evt_t__bindgen_ty_1>())).user_mem_request as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_evt_t__bindgen_ty_1),
            "::",
            stringify!(user_mem_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_common_evt_t__bindgen_ty_1>())).user_mem_release as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_evt_t__bindgen_ty_1),
            "::",
            stringify!(user_mem_release)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_common_evt_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_common_evt_t>(),
        32usize,
        concat!("Size of: ", stringify!(ble_common_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_common_evt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_common_evt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_common_evt_t>())).conn_handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_evt_t),
            "::",
            stringify!(conn_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_common_evt_t>())).params as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_evt_t),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_evt_hdr_t {
    pub evt_id: u16,
    pub evt_len: u16,
}
#[test]
fn bindgen_test_layout_ble_evt_hdr_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_evt_hdr_t>(),
        4usize,
        concat!("Size of: ", stringify!(ble_evt_hdr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_evt_hdr_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_evt_hdr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_evt_hdr_t>())).evt_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_hdr_t),
            "::",
            stringify!(evt_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_evt_hdr_t>())).evt_len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_hdr_t),
            "::",
            stringify!(evt_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_evt_t {
    pub header: ble_evt_hdr_t,
    pub evt: ble_evt_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_evt_t__bindgen_ty_1 {
    pub common_evt: ble_common_evt_t,
    pub gap_evt: ble_gap_evt_t,
    pub gattc_evt: ble_gattc_evt_t,
    pub gatts_evt: ble_gatts_evt_t,
    pub l2cap_evt: ble_l2cap_evt_t,
}
#[test]
fn bindgen_test_layout_ble_evt_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_evt_t__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(ble_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_evt_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_evt_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_evt_t__bindgen_ty_1>())).common_evt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_t__bindgen_ty_1),
            "::",
            stringify!(common_evt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_evt_t__bindgen_ty_1>())).gap_evt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_t__bindgen_ty_1),
            "::",
            stringify!(gap_evt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_evt_t__bindgen_ty_1>())).gattc_evt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_t__bindgen_ty_1),
            "::",
            stringify!(gattc_evt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_evt_t__bindgen_ty_1>())).gatts_evt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_t__bindgen_ty_1),
            "::",
            stringify!(gatts_evt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_evt_t__bindgen_ty_1>())).l2cap_evt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_t__bindgen_ty_1),
            "::",
            stringify!(l2cap_evt)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_evt_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_evt_t>(),
        72usize,
        concat!("Size of: ", stringify!(ble_evt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_evt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_evt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_evt_t>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_evt_t>())).evt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_evt_t),
            "::",
            stringify!(evt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_version_t {
    pub version_number: u8,
    pub company_id: u16,
    pub subversion_number: u16,
}
#[test]
fn bindgen_test_layout_ble_version_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_version_t>(),
        6usize,
        concat!("Size of: ", stringify!(ble_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_version_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_version_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_version_t>())).version_number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_version_t),
            "::",
            stringify!(version_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_version_t>())).company_id as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_version_t),
            "::",
            stringify!(company_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_version_t>())).subversion_number as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_version_t),
            "::",
            stringify!(subversion_number)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_pa_lna_cfg_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_pa_lna_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_pa_lna_cfg_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_pa_lna_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_pa_lna_cfg_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_pa_lna_cfg_t))
    );
}
impl ble_pa_lna_cfg_t {
    #[inline]
    pub fn enable(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_enable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn active_high(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_active_high(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gpio_pin(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_gpio_pin(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enable: u8,
        active_high: u8,
        gpio_pin: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enable: u8 = unsafe { ::std::mem::transmute(enable) };
            enable as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let active_high: u8 = unsafe { ::std::mem::transmute(active_high) };
            active_high as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let gpio_pin: u8 = unsafe { ::std::mem::transmute(gpio_pin) };
            gpio_pin as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_common_opt_pa_lna_t {
    pub pa_cfg: ble_pa_lna_cfg_t,
    pub lna_cfg: ble_pa_lna_cfg_t,
    pub ppi_ch_id_set: u8,
    pub ppi_ch_id_clr: u8,
    pub gpiote_ch_id: u8,
}
#[test]
fn bindgen_test_layout_ble_common_opt_pa_lna_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_common_opt_pa_lna_t>(),
        5usize,
        concat!("Size of: ", stringify!(ble_common_opt_pa_lna_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_common_opt_pa_lna_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_common_opt_pa_lna_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_common_opt_pa_lna_t>())).pa_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_opt_pa_lna_t),
            "::",
            stringify!(pa_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_common_opt_pa_lna_t>())).lna_cfg as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_opt_pa_lna_t),
            "::",
            stringify!(lna_cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_common_opt_pa_lna_t>())).ppi_ch_id_set as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_opt_pa_lna_t),
            "::",
            stringify!(ppi_ch_id_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_common_opt_pa_lna_t>())).ppi_ch_id_clr as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_opt_pa_lna_t),
            "::",
            stringify!(ppi_ch_id_clr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_common_opt_pa_lna_t>())).gpiote_ch_id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_opt_pa_lna_t),
            "::",
            stringify!(gpiote_ch_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_common_opt_conn_evt_ext_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_common_opt_conn_evt_ext_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_common_opt_conn_evt_ext_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_common_opt_conn_evt_ext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_common_opt_conn_evt_ext_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_common_opt_conn_evt_ext_t))
    );
}
impl ble_common_opt_conn_evt_ext_t {
    #[inline]
    pub fn enable(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_enable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(enable: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enable: u8 = unsafe { ::std::mem::transmute(enable) };
            enable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ble_common_opt_extended_rc_cal_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ble_common_opt_extended_rc_cal_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_common_opt_extended_rc_cal_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_common_opt_extended_rc_cal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_common_opt_extended_rc_cal_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(ble_common_opt_extended_rc_cal_t)
        )
    );
}
impl ble_common_opt_extended_rc_cal_t {
    #[inline]
    pub fn enable(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_enable(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(enable: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enable: u8 = unsafe { ::std::mem::transmute(enable) };
            enable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_common_opt_t {
    pub pa_lna: ble_common_opt_pa_lna_t,
    pub conn_evt_ext: ble_common_opt_conn_evt_ext_t,
    pub extended_rc_cal: ble_common_opt_extended_rc_cal_t,
}
#[test]
fn bindgen_test_layout_ble_common_opt_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_common_opt_t>(),
        5usize,
        concat!("Size of: ", stringify!(ble_common_opt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_common_opt_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_common_opt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_common_opt_t>())).pa_lna as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_opt_t),
            "::",
            stringify!(pa_lna)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_common_opt_t>())).conn_evt_ext as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_opt_t),
            "::",
            stringify!(conn_evt_ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_common_opt_t>())).extended_rc_cal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_opt_t),
            "::",
            stringify!(extended_rc_cal)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_opt_t {
    pub common_opt: ble_common_opt_t,
    pub gap_opt: ble_gap_opt_t,
}
#[test]
fn bindgen_test_layout_ble_opt_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_opt_t>(),
        16usize,
        concat!("Size of: ", stringify!(ble_opt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_opt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_opt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_opt_t>())).common_opt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_opt_t),
            "::",
            stringify!(common_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_opt_t>())).gap_opt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_opt_t),
            "::",
            stringify!(gap_opt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ble_conn_cfg_t {
    pub conn_cfg_tag: u8,
    pub params: ble_conn_cfg_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_conn_cfg_t__bindgen_ty_1 {
    pub gap_conn_cfg: ble_gap_conn_cfg_t,
    pub gattc_conn_cfg: ble_gattc_conn_cfg_t,
    pub gatts_conn_cfg: ble_gatts_conn_cfg_t,
    pub gatt_conn_cfg: ble_gatt_conn_cfg_t,
    pub l2cap_conn_cfg: ble_l2cap_conn_cfg_t,
}
#[test]
fn bindgen_test_layout_ble_conn_cfg_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ble_conn_cfg_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ble_conn_cfg_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_conn_cfg_t__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_conn_cfg_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_conn_cfg_t__bindgen_ty_1>())).gap_conn_cfg as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_conn_cfg_t__bindgen_ty_1),
            "::",
            stringify!(gap_conn_cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_conn_cfg_t__bindgen_ty_1>())).gattc_conn_cfg as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_conn_cfg_t__bindgen_ty_1),
            "::",
            stringify!(gattc_conn_cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_conn_cfg_t__bindgen_ty_1>())).gatts_conn_cfg as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_conn_cfg_t__bindgen_ty_1),
            "::",
            stringify!(gatts_conn_cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_conn_cfg_t__bindgen_ty_1>())).gatt_conn_cfg as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_conn_cfg_t__bindgen_ty_1),
            "::",
            stringify!(gatt_conn_cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_conn_cfg_t__bindgen_ty_1>())).l2cap_conn_cfg as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_conn_cfg_t__bindgen_ty_1),
            "::",
            stringify!(l2cap_conn_cfg)
        )
    );
}
#[test]
fn bindgen_test_layout_ble_conn_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_conn_cfg_t>(),
        10usize,
        concat!("Size of: ", stringify!(ble_conn_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_conn_cfg_t>(),
        2usize,
        concat!("Alignment of ", stringify!(ble_conn_cfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_conn_cfg_t>())).conn_cfg_tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_conn_cfg_t),
            "::",
            stringify!(conn_cfg_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_conn_cfg_t>())).params as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_conn_cfg_t),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ble_common_cfg_vs_uuid_t {
    pub vs_uuid_count: u8,
}
#[test]
fn bindgen_test_layout_ble_common_cfg_vs_uuid_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_common_cfg_vs_uuid_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_common_cfg_vs_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_common_cfg_vs_uuid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_common_cfg_vs_uuid_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ble_common_cfg_vs_uuid_t>())).vs_uuid_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_cfg_vs_uuid_t),
            "::",
            stringify!(vs_uuid_count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_common_cfg_t {
    pub vs_uuid_cfg: ble_common_cfg_vs_uuid_t,
}
#[test]
fn bindgen_test_layout_ble_common_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_common_cfg_t>(),
        1usize,
        concat!("Size of: ", stringify!(ble_common_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_common_cfg_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ble_common_cfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_common_cfg_t>())).vs_uuid_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_common_cfg_t),
            "::",
            stringify!(vs_uuid_cfg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ble_cfg_t {
    pub conn_cfg: ble_conn_cfg_t,
    pub common_cfg: ble_common_cfg_t,
    pub gap_cfg: ble_gap_cfg_t,
    pub gatts_cfg: ble_gatts_cfg_t,
}
#[test]
fn bindgen_test_layout_ble_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<ble_cfg_t>(),
        24usize,
        concat!("Size of: ", stringify!(ble_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ble_cfg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ble_cfg_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_cfg_t>())).conn_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cfg_t),
            "::",
            stringify!(conn_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_cfg_t>())).common_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cfg_t),
            "::",
            stringify!(common_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_cfg_t>())).gap_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cfg_t),
            "::",
            stringify!(gap_cfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ble_cfg_t>())).gatts_cfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ble_cfg_t),
            "::",
            stringify!(gatts_cfg)
        )
    );
}
extern "C" {
    pub fn sd_ble_enable(adapter: *mut adapter_t, p_app_ram_base: *mut u32) -> u32;
}
extern "C" {
    pub fn sd_ble_cfg_set(
        adapter: *mut adapter_t,
        cfg_id: u32,
        p_cfg: *const ble_cfg_t,
        app_ram_base: u32,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_evt_get(adapter: *mut adapter_t, p_dest: *mut u8, p_len: *mut u16) -> u32;
}
extern "C" {
    pub fn sd_ble_uuid_vs_add(
        adapter: *mut adapter_t,
        p_vs_uuid: *const ble_uuid128_t,
        p_uuid_type: *mut u8,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_uuid_vs_remove(adapter: *mut adapter_t, p_uuid_type: *mut u8) -> u32;
}
extern "C" {
    pub fn sd_ble_uuid_decode(
        adapter: *mut adapter_t,
        uuid_le_len: u8,
        p_uuid_le: *const u8,
        p_uuid: *mut ble_uuid_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_uuid_encode(
        adapter: *mut adapter_t,
        p_uuid: *const ble_uuid_t,
        p_uuid_le_len: *mut u8,
        p_uuid_le: *mut u8,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_version_get(adapter: *mut adapter_t, p_version: *mut ble_version_t) -> u32;
}
extern "C" {
    pub fn sd_ble_user_mem_reply(
        adapter: *mut adapter_t,
        conn_handle: u16,
        p_block: *const ble_user_mem_block_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_ble_opt_set(adapter: *mut adapter_t, opt_id: u32, p_opt: *const ble_opt_t) -> u32;
}
extern "C" {
    pub fn sd_ble_opt_get(adapter: *mut adapter_t, opt_id: u32, p_opt: *mut ble_opt_t) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sd_rpc_serial_port_desc_t {
    pub port: [::std::os::raw::c_char; 512usize],
    pub manufacturer: [::std::os::raw::c_char; 512usize],
    pub serialNumber: [::std::os::raw::c_char; 512usize],
    pub pnpId: [::std::os::raw::c_char; 512usize],
    pub locationId: [::std::os::raw::c_char; 512usize],
    pub vendorId: [::std::os::raw::c_char; 512usize],
    pub productId: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout_sd_rpc_serial_port_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<sd_rpc_serial_port_desc_t>(),
        3584usize,
        concat!("Size of: ", stringify!(sd_rpc_serial_port_desc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sd_rpc_serial_port_desc_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sd_rpc_serial_port_desc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sd_rpc_serial_port_desc_t>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_rpc_serial_port_desc_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_rpc_serial_port_desc_t>())).manufacturer as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_rpc_serial_port_desc_t),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_rpc_serial_port_desc_t>())).serialNumber as *const _ as usize
        },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_rpc_serial_port_desc_t),
            "::",
            stringify!(serialNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sd_rpc_serial_port_desc_t>())).pnpId as *const _ as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_rpc_serial_port_desc_t),
            "::",
            stringify!(pnpId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_rpc_serial_port_desc_t>())).locationId as *const _ as usize
        },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_rpc_serial_port_desc_t),
            "::",
            stringify!(locationId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_rpc_serial_port_desc_t>())).vendorId as *const _ as usize
        },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_rpc_serial_port_desc_t),
            "::",
            stringify!(vendorId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sd_rpc_serial_port_desc_t>())).productId as *const _ as usize
        },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(sd_rpc_serial_port_desc_t),
            "::",
            stringify!(productId)
        )
    );
}
pub const sd_rpc_app_status_t_PKT_SEND_MAX_RETRIES_REACHED: sd_rpc_app_status_t = 0;
pub const sd_rpc_app_status_t_PKT_UNEXPECTED: sd_rpc_app_status_t = 1;
pub const sd_rpc_app_status_t_PKT_ENCODE_ERROR: sd_rpc_app_status_t = 2;
pub const sd_rpc_app_status_t_PKT_DECODE_ERROR: sd_rpc_app_status_t = 3;
pub const sd_rpc_app_status_t_PKT_SEND_ERROR: sd_rpc_app_status_t = 4;
pub const sd_rpc_app_status_t_IO_RESOURCES_UNAVAILABLE: sd_rpc_app_status_t = 5;
pub const sd_rpc_app_status_t_RESET_PERFORMED: sd_rpc_app_status_t = 6;
pub const sd_rpc_app_status_t_CONNECTION_ACTIVE: sd_rpc_app_status_t = 7;
pub type sd_rpc_app_status_t = ::std::os::raw::c_int;
pub const sd_rpc_log_severity_t_SD_RPC_LOG_TRACE: sd_rpc_log_severity_t = 0;
pub const sd_rpc_log_severity_t_SD_RPC_LOG_DEBUG: sd_rpc_log_severity_t = 1;
pub const sd_rpc_log_severity_t_SD_RPC_LOG_INFO: sd_rpc_log_severity_t = 2;
pub const sd_rpc_log_severity_t_SD_RPC_LOG_WARNING: sd_rpc_log_severity_t = 3;
pub const sd_rpc_log_severity_t_SD_RPC_LOG_ERROR: sd_rpc_log_severity_t = 4;
pub const sd_rpc_log_severity_t_SD_RPC_LOG_FATAL: sd_rpc_log_severity_t = 5;
pub type sd_rpc_log_severity_t = ::std::os::raw::c_int;
pub const sd_rpc_flow_control_t_SD_RPC_FLOW_CONTROL_NONE: sd_rpc_flow_control_t = 0;
pub const sd_rpc_flow_control_t_SD_RPC_FLOW_CONTROL_HARDWARE: sd_rpc_flow_control_t = 1;
pub type sd_rpc_flow_control_t = ::std::os::raw::c_int;
pub const sd_rpc_parity_t_SD_RPC_PARITY_NONE: sd_rpc_parity_t = 0;
pub const sd_rpc_parity_t_SD_RPC_PARITY_EVEN: sd_rpc_parity_t = 1;
pub type sd_rpc_parity_t = ::std::os::raw::c_int;
pub const sd_rpc_reset_t_SYS_RESET: sd_rpc_reset_t = 0;
pub const sd_rpc_reset_t_SOFT_RESET: sd_rpc_reset_t = 1;
pub type sd_rpc_reset_t = ::std::os::raw::c_int;
pub type sd_rpc_status_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        adapter: *mut adapter_t,
        code: sd_rpc_app_status_t,
        message: *const ::std::os::raw::c_char,
    ),
>;
pub type sd_rpc_evt_handler_t =
    ::std::option::Option<unsafe extern "C" fn(adapter: *mut adapter_t, p_ble_evt: *mut ble_evt_t)>;
pub type sd_rpc_log_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        adapter: *mut adapter_t,
        severity: sd_rpc_log_severity_t,
        log_message: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn sd_rpc_serial_port_enum(
        serial_port_descs: *mut sd_rpc_serial_port_desc_t,
        size: *mut u32,
    ) -> u32;
}
extern "C" {
    pub fn sd_rpc_physical_layer_create_uart(
        port_name: *const ::std::os::raw::c_char,
        baud_rate: u32,
        flow_control: sd_rpc_flow_control_t,
        parity: sd_rpc_parity_t,
    ) -> *mut physical_layer_t;
}
extern "C" {
    pub fn sd_rpc_data_link_layer_create_bt_three_wire(
        physical_layer: *mut physical_layer_t,
        retransmission_interval: u32,
    ) -> *mut data_link_layer_t;
}
extern "C" {
    pub fn sd_rpc_transport_layer_create(
        data_link_layer: *mut data_link_layer_t,
        response_timeout: u32,
    ) -> *mut transport_layer_t;
}
extern "C" {
    pub fn sd_rpc_adapter_create(transport_layer: *mut transport_layer_t) -> *mut adapter_t;
}
extern "C" {
    pub fn sd_rpc_adapter_delete(adapter: *mut adapter_t);
}
extern "C" {
    pub fn sd_rpc_open(
        adapter: *mut adapter_t,
        status_handler: sd_rpc_status_handler_t,
        event_handler: sd_rpc_evt_handler_t,
        log_handler: sd_rpc_log_handler_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_rpc_close(adapter: *mut adapter_t) -> u32;
}
extern "C" {
    pub fn sd_rpc_log_handler_severity_filter_set(
        adapter: *mut adapter_t,
        severity_filter: sd_rpc_log_severity_t,
    ) -> u32;
}
extern "C" {
    pub fn sd_rpc_conn_reset(adapter: *mut adapter_t, reset_mode: sd_rpc_reset_t) -> u32;
}
